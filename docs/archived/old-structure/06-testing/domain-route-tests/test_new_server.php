<?php

/**
 * Test Thread Creation Process tr√™n Server Port 8001
 * Ki·ªÉm tra quy tr√¨nh t·∫°o threads sau khi restart server
 */

echo "üîç Test Thread Creation tr√™n Server M·ªõi (Port 8001)\n";
echo "====================================================\n\n";

$baseUrl = 'http://127.0.0.1:8001';

// Test c√°c URL quan tr·ªçng
$testUrls = [
    'Server Root' => $baseUrl,
    'Login Page' => $baseUrl . '/login',
    'Forum Selection' => $baseUrl . '/create-thread',
    'Threads Index' => $baseUrl . '/threads',
    'Threads Create' => $baseUrl . '/threads/create',
    'Threads Create with Forum' => $baseUrl . '/threads/create?forum_id=1',
];

foreach ($testUrls as $name => $url) {
    echo "üß™ Test: $name\n";
    echo "   URL: $url\n";

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    curl_setopt($ch, CURLOPT_USERAGENT, 'MechaMap Testing Bot');

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $redirectUrl = curl_getinfo($ch, CURLINFO_REDIRECT_URL);

    if (curl_errno($ch)) {
        echo "   ‚ùå Error: " . curl_error($ch) . "\n";
    } else {
        switch ($httpCode) {
            case 200:
                echo "   ‚úÖ HTTP 200 - OK\n";
                // Ki·ªÉm tra c√≥ content c·ª• th·ªÉ kh√¥ng
                if (strpos($response, 'Laravel') !== false) {
                    echo "   üìã Laravel app detected\n";
                }
                if (strpos($response, 'T·∫°o Thread') !== false) {
                    echo "   üìù Thread creation form found\n";
                }
                if (strpos($response, 'Ch·ªçn Forum') !== false) {
                    echo "   üè∑Ô∏è  Forum selection form found\n";
                }
                break;
            case 302:
                echo "   ‚Ü©Ô∏è  HTTP 302 - Redirect\n";
                if ($redirectUrl) {
                    echo "   üîó Redirect to: $redirectUrl\n";
                }
                break;
            case 404:
                echo "   ‚ùå HTTP 404 - Not Found\n";
                break;
            case 500:
                echo "   üí• HTTP 500 - Server Error\n";
                break;
            default:
                echo "   ‚ö†Ô∏è  HTTP $httpCode\n";
        }
    }

    curl_close($ch);
    echo "\n";
}

// Test v·ªõi session/authentication
echo "üîê Test Authentication Flow\n";
echo "==========================\n\n";

// 1. Get login page ƒë·ªÉ l·∫•y CSRF token
echo "üìã Step 1: Get login form...\n";
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $baseUrl . '/login');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_COOKIEJAR, sys_get_temp_dir() . '/mechamap_cookies.txt');
curl_setopt($ch, CURLOPT_COOKIEFILE, sys_get_temp_dir() . '/mechamap_cookies.txt');

$loginPage = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if ($httpCode === 200) {
    echo "   ‚úÖ Login page loaded\n";

    // Extract CSRF token
    if (preg_match('/<meta name="csrf-token" content="([^"]*)"/', $loginPage, $matches)) {
        $csrfToken = $matches[1];
        echo "   üîë CSRF token found: " . substr($csrfToken, 0, 20) . "...\n";

        // 2. Attempt login
        echo "\nüìã Step 2: Attempt login...\n";
        curl_setopt($ch, CURLOPT_URL, $baseUrl . '/login');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([
            '_token' => $csrfToken,
            'email' => 'leminh.cnc@gmail.com',
            'password' => 'password123',
            'remember' => '1'
        ]));
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);

        $loginResponse = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $redirectUrl = curl_getinfo($ch, CURLINFO_REDIRECT_URL);

        if ($httpCode === 302 && strpos($redirectUrl, '/dashboard') !== false) {
            echo "   ‚úÖ Login successful - redirected to dashboard\n";

            // 3. Test protected routes
            echo "\nüìã Step 3: Test protected routes...\n";

            $protectedUrls = [
                'Dashboard' => $baseUrl . '/dashboard',
                'Create Thread Form' => $baseUrl . '/threads/create',
                'Forum Selection' => $baseUrl . '/create-thread',
            ];

            foreach ($protectedUrls as $name => $url) {
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, false);
                curl_setopt($ch, CURLOPT_POSTFIELDS, '');
                curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);

                $response = curl_exec($ch);
                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

                echo "   üß™ $name: ";
                switch ($httpCode) {
                    case 200:
                        echo "‚úÖ HTTP 200 - Accessible\n";
                        break;
                    case 302:
                        $redirectUrl = curl_getinfo($ch, CURLINFO_REDIRECT_URL);
                        echo "‚Ü©Ô∏è HTTP 302 - Redirect to: $redirectUrl\n";
                        break;
                    case 404:
                        echo "‚ùå HTTP 404 - Not Found\n";
                        break;
                    default:
                        echo "‚ö†Ô∏è HTTP $httpCode\n";
                }
            }
        } else {
            echo "   ‚ùå Login failed - HTTP $httpCode\n";
            if ($redirectUrl) {
                echo "   üîó Redirect: $redirectUrl\n";
            }
        }
    } else {
        echo "   ‚ùå CSRF token not found\n";
    }
} else {
    echo "   ‚ùå Cannot load login page - HTTP $httpCode\n";
}

curl_close($ch);

echo "\nüìä Summary\n";
echo "==========\n";
echo "‚úÖ ƒê·ªÉ test manual, truy c·∫≠p:\n";
echo "   üåê http://127.0.0.1:8001\n";
echo "   üîê Login: leminh.cnc@gmail.com / password123\n";
echo "   üìù Create Thread: http://127.0.0.1:8001/create-thread\n";
echo "   üéØ Direct Route: http://127.0.0.1:8001/threads/create\n\n";

echo "üöÄ Test ho√†n th√†nh!\n";
