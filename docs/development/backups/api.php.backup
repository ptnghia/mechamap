<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

// API version 1
Route::prefix('v1')->group(function () {
    // Test CORS for v1 API
    Route::get('/cors-test', function (Request $request) {
        return response()->json([
            'success' => true,
            'message' => 'CORS test successful',
            'origin' => $request->header('Origin'),
            'allowed_origins' => explode(',', env('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,https://localhost:3000')),
        ]);
    });

    // Public routes
    Route::get('/settings', [App\Http\Controllers\Api\SettingsController::class, 'index']);
    Route::get('/settings/{group}', [App\Http\Controllers\Api\SettingsController::class, 'getByGroup']);

    // API Monitoring & Health Check routes
    Route::prefix('monitoring')->group(function () {
        Route::get('/health', [App\Http\Controllers\Api\ApiMonitoringController::class, 'healthCheck']);
        Route::get('/dashboard', [App\Http\Controllers\Api\ApiMonitoringController::class, 'dashboard']);
        Route::get('/endpoint-metrics', [App\Http\Controllers\Api\ApiMonitoringController::class, 'endpointMetrics']);
        Route::get('/recent-errors', [App\Http\Controllers\Api\ApiMonitoringController::class, 'recentErrors']);
        Route::get('/export-metrics', [App\Http\Controllers\Api\ApiMonitoringController::class, 'exportMetrics']);
        Route::post('/refresh-cache', [App\Http\Controllers\Api\ApiMonitoringController::class, 'refreshCache']);
    });

    // API Documentation routes
    Route::prefix('docs')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\ApiDocumentationController::class, 'swaggerUi']);
        Route::get('/explorer', [App\Http\Controllers\Api\ApiDocumentationController::class, 'apiExplorer']);
        Route::get('/markdown', [App\Http\Controllers\Api\ApiDocumentationController::class, 'markdownDocs']);
        Route::get('/openapi.json', [App\Http\Controllers\Api\ApiDocumentationController::class, 'openApiSpec']);
        Route::get('/endpoints', [App\Http\Controllers\Api\ApiDocumentationController::class, 'endpointsList']);
        Route::post('/validate-schema', [App\Http\Controllers\Api\ApiDocumentationController::class, 'validateSchema']);
    });
    Route::get('/seo', [App\Http\Controllers\Api\SeoController::class, 'index']);
    Route::get('/seo/{group}', [App\Http\Controllers\Api\SeoController::class, 'getByGroup']);
    Route::get('/page-seo/{routeName}', [App\Http\Controllers\Api\SeoController::class, 'getPageSeoByRoute']);
    Route::get('/page-seo/url/{urlPattern}', [App\Http\Controllers\Api\SeoController::class, 'getPageSeoByUrl']);
    Route::get('/favicon', [App\Http\Controllers\Api\FaviconController::class, 'getFavicon']);

    // Auth routes (public)
    Route::prefix('auth')->group(function () {
        Route::post('/login', [App\Http\Controllers\Api\AuthController::class, 'login']);
        Route::post('/register', [App\Http\Controllers\Api\AuthController::class, 'register']);
        Route::post('/forgot-password', [App\Http\Controllers\Api\AuthController::class, 'forgotPassword']);
        Route::post('/reset-password', [App\Http\Controllers\Api\AuthController::class, 'resetPassword']);
        Route::post('/verify-email', [App\Http\Controllers\Api\AuthController::class, 'verifyEmail']);
        Route::post('/social/{provider}', [App\Http\Controllers\Api\AuthController::class, 'socialLogin']);
    });

    // Users routes (public)
    Route::prefix('users')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\UserController::class, 'index']);
        Route::get('/{username}', [App\Http\Controllers\Api\UserController::class, 'show']);
        Route::get('/{username}/threads', [App\Http\Controllers\Api\UserController::class, 'getThreads']);
        Route::get('/{username}/comments', [App\Http\Controllers\Api\UserController::class, 'getComments']);
        Route::get('/{username}/activities', [App\Http\Controllers\Api\UserController::class, 'getActivities']);
        Route::get('/{username}/followers', [App\Http\Controllers\Api\UserController::class, 'getFollowers']);
        Route::get('/{username}/following', [App\Http\Controllers\Api\UserController::class, 'getFollowing']);
    });

    // Forums routes (public)
    Route::prefix('forums')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\ForumController::class, 'index']);
        Route::get('/{slug}', [App\Http\Controllers\Api\ForumController::class, 'show']);
        Route::get('/{slug}/threads', [App\Http\Controllers\Api\ForumController::class, 'getThreads']);
    });

    // Categories routes (public)
    Route::prefix('categories')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\ForumController::class, 'getCategories']);
        Route::get('/{slug}', [App\Http\Controllers\Api\ForumController::class, 'getCategory']);
        Route::get('/{slug}/forums', [App\Http\Controllers\Api\ForumController::class, 'getCategoryForums']);
    });

    // Tags routes (public)
    Route::prefix('tags')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\TagController::class, 'index']);
        Route::get('/{slug}', [App\Http\Controllers\Api\TagController::class, 'show']);
        Route::get('/{slug}/threads', [App\Http\Controllers\Api\TagController::class, 'getThreads']);
    });

    // Threads routes (public)
    Route::prefix('threads')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\ThreadController::class, 'index']);
        Route::get('/actions/approve-all', [App\Http\Controllers\Api\ThreadController::class, 'approveAllThreads']);
        Route::get('/need-replies', [App\Http\Controllers\Api\ThreadController::class, 'getNeedReplies']);
        Route::get('/top-rated', [App\Http\Controllers\UserThreadController::class, 'topRated']);
        Route::get('/trending', [App\Http\Controllers\UserThreadController::class, 'trending']);
        Route::get('/by-tag/{tag}', [App\Http\Controllers\UserThreadController::class, 'byTag']);
        Route::get('/by-forum/{forum}', [App\Http\Controllers\UserThreadController::class, 'byForum']);
        Route::get('/search', [App\Http\Controllers\UserThreadController::class, 'search']);
        Route::get('/{slug}', [App\Http\Controllers\Api\ThreadController::class, 'show']);
        Route::get('/{slug}/comments', [App\Http\Controllers\Api\ThreadController::class, 'getComments']);
        Route::get('/{slug}/media', [App\Http\Controllers\Api\MediaController::class, 'getThreadMedia']);
        Route::get('/{slug}/tags', [App\Http\Controllers\Api\ThreadController::class, 'getTags']);
        Route::get('/{thread}/ratings/reviews', [App\Http\Controllers\ThreadRatingController::class, 'getThreadReviews']);
    });

    // Search routes (public)
    Route::prefix('search')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\SearchController::class, 'search']);
        Route::get('/suggestions', [App\Http\Controllers\Api\SearchController::class, 'suggestions']);
    });

    // SEO routes (public)
    Route::prefix('seo')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\SeoController::class, 'index']);
        Route::get('/pages/{slug}', [App\Http\Controllers\Api\SeoController::class, 'getPageSeo']);
        Route::get('/threads/{slug}', [App\Http\Controllers\Api\SeoController::class, 'getThreadSeo']);
        Route::get('/forums/{slug}', [App\Http\Controllers\Api\SeoController::class, 'getForumSeo']);
        Route::get('/categories/{slug}', [App\Http\Controllers\Api\SeoController::class, 'getCategorySeo']);
        Route::get('/users/{username}', [App\Http\Controllers\Api\SeoController::class, 'getUserSeo']);
    });

    // Showcase routes (public)
    Route::prefix('showcases')->group(function () {
        Route::get('/', [App\Http\Controllers\Api\ShowcaseController::class, 'index']);
        Route::get('/recent', [App\Http\Controllers\Api\ShowcaseController::class, 'getRecent']);
        Route::get('/{slug}', [App\Http\Controllers\Api\ShowcaseController::class, 'show']);
    });

    // Stats routes (public)
    Route::prefix('stats')->group(function () {
        Route::get('/forum', [App\Http\Controllers\Api\StatsController::class, 'getForumStats']);
        Route::get('/forums/popular', [App\Http\Controllers\Api\StatsController::class, 'getPopularForums']);
        Route::get('/users/active', [App\Http\Controllers\Api\StatsController::class, 'getActiveUsers']);
        Route::get('/threads/featured', [App\Http\Controllers\Api\StatsController::class, 'getFeaturedThreads']);
    });

    // Avatar routes (public)
    Route::get('/avatar', [App\Http\Controllers\Api\AvatarController::class, 'generate']);

    // Comments routes (public)
    Route::get('/comments/recent', [App\Http\Controllers\Api\CommentController::class, 'getRecent']);

    // Media routes (public)
    Route::get('/media/recent', [App\Http\Controllers\Api\MediaController::class, 'getRecent']);

    // Articles routes (public)
    Route::get('/articles/recent', [App\Http\Controllers\Api\ArticleController::class, 'getRecent']);

    // Test routes (chỉ dùng trong môi trường development)
    if (app()->environment('local', 'development', 'staging', 'production')) { // Tạm thời cho phép trên production để test
        Route::get('/test/add-to-showcase', [App\Http\Controllers\Api\TestController::class, 'addThreadsToShowcase']);
        Route::get('/test/add-single-to-showcase', [App\Http\Controllers\Api\TestController::class, 'addSingleThreadToShowcase']);
    }

    // Protected routes
    Route::middleware('auth:sanctum')->group(function () {
        // User info
        Route::get('/user', function (Request $request) {
            return $request->user();
        });

        // Auth routes (protected)
        Route::prefix('auth')->group(function () {
            Route::get('/me', [App\Http\Controllers\Api\AuthController::class, 'me']);
            Route::post('/logout', [App\Http\Controllers\Api\AuthController::class, 'logout']);
            Route::post('/refresh', [App\Http\Controllers\Api\AuthController::class, 'refresh']);
        });

        // Users routes (protected)
        Route::prefix('users')->group(function () {
            Route::put('/{username}', [App\Http\Controllers\Api\UserController::class, 'update']);
            Route::delete('/{username}', [App\Http\Controllers\Api\UserController::class, 'destroy']);
            Route::post('/{username}/follow', [App\Http\Controllers\Api\UserController::class, 'follow']);
            Route::delete('/{username}/follow', [App\Http\Controllers\Api\UserController::class, 'unfollow']);
            Route::post('/avatar', [App\Http\Controllers\Api\UserController::class, 'updateAvatar']);
        });

        // Threads routes (protected)
        Route::prefix('threads')->group(function () {
            Route::post('/', [App\Http\Controllers\Api\ThreadController::class, 'store']);
            Route::put('/{slug}', [App\Http\Controllers\Api\ThreadController::class, 'update']);
            Route::delete('/{slug}', [App\Http\Controllers\Api\ThreadController::class, 'destroy']);
            Route::post('/{slug}/like', [App\Http\Controllers\Api\ThreadController::class, 'like']);
            Route::delete('/{slug}/like', [App\Http\Controllers\Api\ThreadController::class, 'unlike']);
            Route::post('/{slug}/save', [App\Http\Controllers\Api\ThreadController::class, 'save']);
            Route::delete('/{slug}/save', [App\Http\Controllers\Api\ThreadController::class, 'unsave']);
            Route::post('/{slug}/follow', [App\Http\Controllers\Api\ThreadController::class, 'follow']);
            Route::delete('/{slug}/follow', [App\Http\Controllers\Api\ThreadController::class, 'unfollow']);
            Route::post('/{slug}/tags', [App\Http\Controllers\Api\ThreadController::class, 'addTags']);
            Route::delete('/{slug}/tags', [App\Http\Controllers\Api\ThreadController::class, 'removeTags']);
            Route::post('/{slug}/report', [App\Http\Controllers\Api\ReportController::class, 'reportThread']);
            Route::get('/saved', [App\Http\Controllers\Api\ThreadController::class, 'getSaved']);
            Route::get('/followed', [App\Http\Controllers\Api\ThreadController::class, 'getFollowed']);
            Route::post('/{slug}/comments', [App\Http\Controllers\Api\CommentController::class, 'store']);
        });

        // Comments routes (protected)
        Route::prefix('comments')->group(function () {
            Route::put('/{id}', [App\Http\Controllers\Api\CommentController::class, 'update']);
            Route::delete('/{id}', [App\Http\Controllers\Api\CommentController::class, 'destroy']);
            Route::post('/{id}/like', [App\Http\Controllers\Api\CommentController::class, 'like']);
            Route::delete('/{id}/like', [App\Http\Controllers\Api\CommentController::class, 'unlike']);
            Route::post('/{id}/report', [App\Http\Controllers\Api\ReportController::class, 'reportComment']);
            Route::get('/{id}/replies', [App\Http\Controllers\Api\CommentController::class, 'getReplies']);
            Route::post('/{id}/replies', [App\Http\Controllers\Api\CommentController::class, 'storeReply']);
        });

        // Alerts routes (protected)
        Route::prefix('alerts')->group(function () {
            Route::get('/', [App\Http\Controllers\Api\AlertController::class, 'index']);
            Route::post('/{id}/read', [App\Http\Controllers\Api\AlertController::class, 'markAsRead']);
            Route::delete('/{id}', [App\Http\Controllers\Api\AlertController::class, 'destroy']);
            Route::post('/read-all', [App\Http\Controllers\Api\AlertController::class, 'markAllAsRead']);
        });

        // Conversations routes (protected)
        Route::prefix('conversations')->group(function () {
            Route::get('/', [App\Http\Controllers\Api\ConversationController::class, 'index']);
            Route::post('/', [App\Http\Controllers\Api\ConversationController::class, 'store']);
            Route::get('/{id}', [App\Http\Controllers\Api\ConversationController::class, 'show']);
            Route::post('/{id}/messages', [App\Http\Controllers\Api\ConversationController::class, 'sendMessage']);
            Route::post('/{id}/read', [App\Http\Controllers\Api\ConversationController::class, 'markAsRead']);
        });

        // Media routes (protected)
        Route::prefix('media')->group(function () {
            Route::get('/', [App\Http\Controllers\Api\MediaController::class, 'index']);
            Route::post('/', [App\Http\Controllers\Api\MediaController::class, 'store']);
            Route::get('/{id}', [App\Http\Controllers\Api\MediaController::class, 'show']);
            Route::put('/{id}', [App\Http\Controllers\Api\MediaController::class, 'update']);
            Route::delete('/{id}', [App\Http\Controllers\Api\MediaController::class, 'destroy']);
        });

        // Showcase routes (protected)
        Route::prefix('showcases')->group(function () {
            Route::post('/', [App\Http\Controllers\Api\ShowcaseController::class, 'store']);
            Route::put('/{slug}', [App\Http\Controllers\Api\ShowcaseController::class, 'update']);
            Route::delete('/{slug}', [App\Http\Controllers\Api\ShowcaseController::class, 'destroy']);
        });

        // Quality và Moderation routes (protected)
        Route::prefix('moderation')->middleware(['can:moderate-content'])->group(function () {
            // Thread moderation
            Route::post('/threads/{thread}/flag', [App\Http\Controllers\ModerationController::class, 'flagThread']);
            Route::delete('/threads/{thread}/flag', [App\Http\Controllers\ModerationController::class, 'unflagThread']);
            Route::post('/threads/{thread}/spam', [App\Http\Controllers\ModerationController::class, 'markThreadAsSpam']);
            Route::delete('/threads/{thread}/spam', [App\Http\Controllers\ModerationController::class, 'unmarkThreadAsSpam']);
            Route::put('/threads/{thread}/moderation-status', [App\Http\Controllers\ModerationController::class, 'updateThreadModerationStatus']);
            Route::post('/threads/{thread}/archive', [App\Http\Controllers\ModerationController::class, 'archiveThread']);
            Route::delete('/threads/{thread}/archive', [App\Http\Controllers\ModerationController::class, 'unarchiveThread']);
            Route::post('/threads/{thread}/hide', [App\Http\Controllers\ModerationController::class, 'hideThread']);
            Route::delete('/threads/{thread}/hide', [App\Http\Controllers\ModerationController::class, 'unhideThread']);

            // Comment moderation
            Route::post('/comments/{comment}/flag', [App\Http\Controllers\ModerationController::class, 'flagComment']);
            Route::delete('/comments/{comment}/flag', [App\Http\Controllers\ModerationController::class, 'unflagComment']);
            Route::post('/comments/{comment}/spam', [App\Http\Controllers\ModerationController::class, 'markCommentAsSpam']);
            Route::delete('/comments/{comment}/spam', [App\Http\Controllers\ModerationController::class, 'unmarkCommentAsSpam']);
            Route::post('/comments/{comment}/solution', [App\Http\Controllers\ModerationController::class, 'markCommentAsSolution']);
            Route::delete('/comments/{comment}/solution', [App\Http\Controllers\ModerationController::class, 'unmarkCommentAsSolution']);

            // Batch operations
            Route::post('/threads/batch', [App\Http\Controllers\ModerationController::class, 'batchModerationThreads']);

            // Moderation dashboard
            Route::get('/threads/pending', [App\Http\Controllers\ModerationController::class, 'getPendingThreads']);
            Route::get('/comments/pending', [App\Http\Controllers\ModerationController::class, 'getPendingComments']);
        });

        // Thread Quality routes (protected)
        Route::prefix('threads/{thread}')->group(function () {
            // Rating endpoints
            Route::post('/rate', [App\Http\Controllers\Api\ThreadQualityController::class, 'rateThread']);
            Route::delete('/rate', [App\Http\Controllers\Api\ThreadQualityController::class, 'removeRating']);
            Route::get('/rating', [App\Http\Controllers\Api\ThreadQualityController::class, 'getUserRating']);
            Route::get('/ratings', [App\Http\Controllers\Api\ThreadQualityController::class, 'getThreadRatings']);
            
            // Bookmark endpoints
            Route::post('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'bookmarkThread']);
            Route::delete('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'removeBookmark']);
            Route::put('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'updateBookmark']);
            Route::get('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'getBookmarkStatus']);
        });

        // User Quality Data routes (protected)
        Route::prefix('user')->group(function () {
            Route::get('/bookmarks', [App\Http\Controllers\Api\ThreadQualityController::class, 'getUserBookmarks']);
            Route::get('/bookmark-folders', [App\Http\Controllers\Api\ThreadQualityController::class, 'getBookmarkFolders']);
        });
            Route::get('/threads/pending', [App\Http\Controllers\ModerationController::class, 'getPendingThreads']);
            Route::get('/comments/pending', [App\Http\Controllers\ModerationController::class, 'getPendingComments']);
        });

        // Thread Quality routes (protected)
        Route::prefix('threads/{thread}')->group(function () {
            // Rating endpoints
            Route::post('/rate', [App\Http\Controllers\Api\ThreadQualityController::class, 'rateThread']);
            Route::delete('/rate', [App\Http\Controllers\Api\ThreadQualityController::class, 'removeRating']);
            Route::get('/rating', [App\Http\Controllers\Api\ThreadQualityController::class, 'getUserRating']);
            Route::get('/ratings', [App\Http\Controllers\Api\ThreadQualityController::class, 'getThreadRatings']);
            
            // Bookmark endpoints
            Route::post('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'bookmarkThread']);
            Route::delete('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'removeBookmark']);
            Route::put('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'updateBookmark']);
            Route::get('/bookmark', [App\Http\Controllers\Api\ThreadQualityController::class, 'getBookmarkStatus']);
        });

        // User Quality Data routes (protected)
        Route::prefix('user')->group(function () {
            Route::get('/bookmarks', [App\Http\Controllers\Api\ThreadQualityController::class, 'getUserBookmarks']);
            Route::get('/bookmark-folders', [App\Http\Controllers\Api\ThreadQualityController::class, 'getBookmarkFolders']);
        });

        // Admin routes
        Route::prefix('admin')->middleware(['auth:sanctum', 'role:admin'])->group(function () {
            // Showcase management
            Route::prefix('showcases')->group(function () {
                Route::get('/', [App\Http\Controllers\Api\Admin\ShowcaseController::class, 'index']);
                Route::post('/add', [App\Http\Controllers\Api\Admin\ShowcaseController::class, 'addToShowcase']);
                Route::delete('/{id}', [App\Http\Controllers\Api\Admin\ShowcaseController::class, 'removeFromShowcase']);
            });

            // Reports management
            Route::prefix('reports')->group(function () {
                Route::get('/', [App\Http\Controllers\Api\ReportController::class, 'index']);
                Route::put('/{id}', [App\Http\Controllers\Api\ReportController::class, 'updateStatus']);
            });

            // Tags management
            Route::prefix('tags')->group(function () {
                Route::post('/', [App\Http\Controllers\Api\TagController::class, 'store']);
            });
        });
    });
});
