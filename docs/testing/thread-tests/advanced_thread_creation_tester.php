<?php

require_once __DIR__ . '/../../vendor/autoload.php';

/**
 * üî¨ Advanced Thread Creation Flow Tester
 *
 * Script n√†y s·∫Ω test to√†n b·ªô quy tr√¨nh t·∫°o thread m·ªôt c√°ch chi ti·∫øt,
 * bao g·ªìm authentication, forum selection, v√† form submission.
 */

class AdvancedThreadCreationTester
{
    private $baseUrl;
    private $cookieJar;
    private $csrfToken;
    private $sessionCookies = [];

    public function __construct($baseUrl = 'http://127.0.0.1:8000')
    {
        $this->baseUrl = rtrim($baseUrl, '/');
        $this->cookieJar = tempnam(sys_get_temp_dir(), 'cookies');
    }

    public function runCompleteTest()
    {
        echo "üöÄ B·∫Øt ƒë·∫ßu Advanced Thread Creation Test\n";
        echo "=" . str_repeat("=", 50) . "\n\n";

        try {
            // Step 1: Get CSRF token and session
            $this->step1_getInitialSession();

            // Step 2: Login
            $this->step2_login();

            // Step 3: Test forum selection
            $this->step3_testForumSelection();

            // Step 4: Test thread creation form
            $this->step4_testThreadCreationForm();

            // Step 5: Submit new thread
            $this->step5_submitThread();

            echo "\n‚úÖ T·∫•t c·∫£ tests ho√†n th√†nh th√†nh c√¥ng!\n";
        } catch (Exception $e) {
            echo "\n‚ùå Test th·∫•t b·∫°i: " . $e->getMessage() . "\n";
            echo "üìç Line: " . $e->getLine() . "\n";
        } finally {
            // Clean up
            if (file_exists($this->cookieJar)) {
                unlink($this->cookieJar);
            }
        }
    }

    private function step1_getInitialSession()
    {
        echo "üìã Step 1: L·∫•y session v√† CSRF token...\n";

        $response = $this->makeRequest('GET', '/login');

        if ($response['http_code'] !== 200) {
            throw new Exception("Kh√¥ng th·ªÉ truy c·∫≠p login page. HTTP Code: " . $response['http_code']);
        }

        // Extract CSRF token
        if (preg_match('/<meta name="csrf-token" content="([^"]+)"/', $response['body'], $matches)) {
            $this->csrfToken = $matches[1];
            echo "   ‚úÖ CSRF Token: " . substr($this->csrfToken, 0, 10) . "...\n";
        } else {
            throw new Exception("Kh√¥ng t√¨m th·∫•y CSRF token trong login page");
        }

        echo "   ‚úÖ Session cookies ƒë∆∞·ª£c thi·∫øt l·∫≠p\n\n";
    }

    private function step2_login()
    {
        echo "üîë Step 2: ƒêƒÉng nh·∫≠p...\n";

        $loginData = [
            '_token' => $this->csrfToken,
            'email' => 'leminh.cnc@gmail.com',
            'password' => 'password123',
            'remember' => '0'
        ];

        $response = $this->makeRequest('POST', '/login', $loginData);

        // Check for redirect to dashboard/home
        if ($response['http_code'] === 302) {
            $location = $response['redirect_location'] ?? '';
            echo "   ‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Redirect to: $location\n";
        } else {
            throw new Exception("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. HTTP Code: " . $response['http_code']);
        }

        echo "\n";
    }

    private function step3_testForumSelection()
    {
        echo "üìÇ Step 3: Test forum selection...\n";

        $response = $this->makeRequest('GET', '/create-thread');

        if ($response['http_code'] !== 200) {
            throw new Exception("Kh√¥ng th·ªÉ truy c·∫≠p forum selection. HTTP Code: " . $response['http_code']);
        }

        // Check if page contains forum list
        if (strpos($response['body'], 'forum') !== false || strpos($response['body'], 'Ch·ªçn') !== false) {
            echo "   ‚úÖ Forum selection page hi·ªÉn th·ªã ƒë√∫ng\n";
        } else {
            echo "   ‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y forum selection content\n";
        }

        // Extract available forums
        if (preg_match_all('/value="(\d+)"[^>]*>([^<]+)</i', $response['body'], $matches, PREG_SET_ORDER)) {
            echo "   üìã Available forums:\n";
            foreach ($matches as $match) {
                echo "      - Forum ID: {$match[1]} - {$match[2]}\n";
            }
        }

        echo "\n";
    }

    private function step4_testThreadCreationForm()
    {
        echo "üìù Step 4: Test thread creation form...\n";

        // Test v·ªõi forum_id
        $response = $this->makeRequest('GET', '/threads/create?forum_id=1');

        if ($response['http_code'] !== 200) {
            throw new Exception("Kh√¥ng th·ªÉ truy c·∫≠p thread creation form. HTTP Code: " . $response['http_code']);
        }

        // Check for form elements
        $hasTitle = strpos($response['body'], 'name="title"') !== false;
        $hasContent = strpos($response['body'], 'name="content"') !== false;
        $hasSubmit = strpos($response['body'], 'type="submit"') !== false;

        echo "   üìã Form elements check:\n";
        echo "      - Title field: " . ($hasTitle ? "‚úÖ" : "‚ùå") . "\n";
        echo "      - Content field: " . ($hasContent ? "‚úÖ" : "‚ùå") . "\n";
        echo "      - Submit button: " . ($hasSubmit ? "‚úÖ" : "‚ùå") . "\n";

        if (!$hasTitle || !$hasContent || !$hasSubmit) {
            throw new Exception("Thread creation form thi·∫øu c√°c elements c·∫ßn thi·∫øt");
        }

        // Extract new CSRF token from form
        if (preg_match('/<meta name="csrf-token" content="([^"]+)"/', $response['body'], $matches)) {
            $this->csrfToken = $matches[1];
        }

        echo "\n";
    }

    private function step5_submitThread()
    {
        echo "üíæ Step 5: Submit thread...\n";

        $threadData = [
            '_token' => $this->csrfToken,
            'title' => 'Test Thread t·ª´ Advanced Tester - ' . date('Y-m-d H:i:s'),
            'content' => 'ƒê√¢y l√† n·ªôi dung test thread ƒë∆∞·ª£c t·∫°o b·ªüi Advanced Thread Creation Tester. ' .
                'Th·ªùi gian t·∫°o: ' . date('Y-m-d H:i:s') . '. ' .
                'M·ª•c ƒë√≠ch: Ki·ªÉm tra quy tr√¨nh t·∫°o thread ho√†n ch·ªânh.',
            'forum_id' => '1',
            'tags' => 'test,automation,mechamap',
            'is_pinned' => '0',
            'is_locked' => '0',
            'visibility' => 'public'
        ];

        $response = $this->makeRequest('POST', '/threads', $threadData);

        // Check response
        if ($response['http_code'] === 302) {
            $location = $response['redirect_location'] ?? '';
            echo "   ‚úÖ Thread ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\n";
            echo "   üîó Redirect to: $location\n";

            // Extract thread ID from redirect URL
            if (preg_match('/threads\/(\d+)/', $location, $matches)) {
                $threadId = $matches[1];
                echo "   üÜî Thread ID: $threadId\n";

                // Verify thread exists
                $this->verifyThreadExists($threadId);
            }
        } elseif ($response['http_code'] === 422) {
            echo "   ‚ùå Validation errors:\n";
            $this->parseValidationErrors($response['body']);
        } else {
            throw new Exception("Thread creation failed. HTTP Code: " . $response['http_code']);
        }

        echo "\n";
    }

    private function verifyThreadExists($threadId)
    {
        echo "üîç Verifying thread exists...\n";

        $response = $this->makeRequest('GET', "/threads/$threadId");

        if ($response['http_code'] === 200) {
            echo "   ‚úÖ Thread hi·ªÉn th·ªã th√†nh c√¥ng!\n";

            // Check for thread content
            if (strpos($response['body'], 'Advanced Tester') !== false) {
                echo "   ‚úÖ Thread content ch√≠nh x√°c\n";
            }
        } else {
            echo "   ‚ùå Kh√¥ng th·ªÉ xem thread. HTTP Code: " . $response['http_code'] . "\n";
        }
    }

    private function parseValidationErrors($html)
    {
        // Try to extract validation errors from response
        if (preg_match_all('/<div[^>]*class="[^"]*alert[^"]*"[^>]*>([^<]+)<\/div>/', $html, $matches)) {
            foreach ($matches[1] as $error) {
                echo "      - " . trim(strip_tags($error)) . "\n";
            }
        } else {
            echo "      - Kh√¥ng th·ªÉ parse validation errors\n";
        }
    }

    private function makeRequest($method, $url, $data = null)
    {
        $ch = curl_init();

        curl_setopt_array($ch, [
            CURLOPT_URL => $this->baseUrl . $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => false,
            CURLOPT_COOKIEJAR => $this->cookieJar,
            CURLOPT_COOKIEFILE => $this->cookieJar,
            CURLOPT_HEADER => true,
            CURLOPT_USERAGENT => 'AdvancedThreadTester/1.0',
            CURLOPT_TIMEOUT => 30,
        ]);

        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
            }
        }

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);

        if (curl_error($ch)) {
            throw new Exception('cURL Error: ' . curl_error($ch));
        }

        curl_close($ch);

        $headers = substr($response, 0, $headerSize);
        $body = substr($response, $headerSize);

        // Extract redirect location
        $redirectLocation = null;
        if (preg_match('/Location: (.+)/', $headers, $matches)) {
            $redirectLocation = trim($matches[1]);
        }

        return [
            'http_code' => $httpCode,
            'headers' => $headers,
            'body' => $body,
            'redirect_location' => $redirectLocation
        ];
    }
}

// Run the test
$tester = new AdvancedThreadCreationTester();
$tester->runCompleteTest();

echo "\nüéØ Test ho√†n th√†nh! Ki·ªÉm tra k·∫øt qu·∫£ ·ªü tr√™n.\n";
echo "üìù ƒê·ªÉ test th·ªß c√¥ng, m·ªü browser v√† l√†m theo h∆∞·ªõng d·∫´n trong manual_browser_test_guide.md\n";
