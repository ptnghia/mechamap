<?php
/**
 * Language Files Migration Script
 *
 * Purpose: Migrate keys from oversized messages.php to focused files
 * Author: MechaMap Development Team
 * Date: 2025-07-12
 *
 * Usage: php migrate-language-files.php [--dry-run] [--verbose]
 */

require_once __DIR__ . '/../../vendor/autoload.php';

class LanguageMigration
{
    private $basePath;
    private $backupPath;
    private $dryRun = false;
    private $verbose = false;
    private $migrationLog = [];

    public function __construct($basePath = null)
    {
        $this->basePath = $basePath ?: realpath(__DIR__ . '/../../resources/lang');
        $this->backupPath = __DIR__ . '/../../backup/language-files-' . date('Ymd_His');

        if (!$this->basePath) {
            throw new Exception("Language files path not found");
        }
    }

    public function run($options = [])
    {
        $this->dryRun = $options['dry-run'] ?? false;
        $this->verbose = $options['verbose'] ?? false;

        $this->log("üöÄ Starting Language Files Migration");
        $this->log("Base Path: {$this->basePath}");
        $this->log("Dry Run: " . ($this->dryRun ? 'YES' : 'NO'));

        try {
            // Step 1: Create backup
            $this->createBackup();

            // Step 2: Load current messages.php
            $messagesVi = $this->loadLanguageFile('vi/messages.php');
            $messagesEn = $this->loadLanguageFile('en/messages.php');

            // Step 3: Create new file structures
            $this->createNewFileStructures($messagesVi, $messagesEn);

            // Step 4: Eliminate duplicates
            $this->eliminateDuplicates();

            // Step 5: Validate migration
            $this->validateMigration();

            $this->log("‚úÖ Migration completed successfully!");
            $this->generateReport();

        } catch (Exception $e) {
            $this->log("‚ùå Migration failed: " . $e->getMessage());
            throw $e;
        }
    }

    private function createBackup()
    {
        $this->log("üì¶ Creating backup...");

        if (!$this->dryRun) {
            if (!is_dir($this->backupPath)) {
                mkdir($this->backupPath, 0755, true);
            }

            // Use Windows-compatible copy command
            $sourceDir = str_replace('/', '\\', $this->basePath);
            $targetDir = str_replace('/', '\\', $this->backupPath);
            $this->executeCommand("xcopy \"{$sourceDir}\" \"{$targetDir}\" /E /I /Y");
        }

        $this->log("‚úÖ Backup created at: {$this->backupPath}");
    }

    private function loadLanguageFile($relativePath)
    {
        $fullPath = $this->basePath . '/' . $relativePath;

        if (!file_exists($fullPath)) {
            throw new Exception("Language file not found: {$fullPath}");
        }

        $this->log("üìñ Loading: {$relativePath}");
        return include $fullPath;
    }

    private function createNewFileStructures($messagesVi, $messagesEn)
    {
        $this->log("üèóÔ∏è Creating new file structures...");

        // Define migration mappings
        $mappings = [
            'nav.php' => $this->extractNavKeys($messagesVi, $messagesEn),
            'ui.php' => $this->extractUiKeys($messagesVi, $messagesEn),
            'auth.php' => $this->extractAuthKeys($messagesVi, $messagesEn),
            'marketplace.php' => $this->extractMarketplaceKeys($messagesVi, $messagesEn),
            'forum.php' => $this->extractForumKeys($messagesVi, $messagesEn),
            'common.php' => $this->extractCommonKeys($messagesVi, $messagesEn),
        ];

        foreach ($mappings as $filename => $data) {
            $this->createLanguageFile('vi/' . $filename, $data['vi']);
            $this->createLanguageFile('en/' . $filename, $data['en']);
        }
    }

    private function extractNavKeys($messagesVi, $messagesEn)
    {
        $navKeysVi = [
            'main' => [
                'home' => $messagesVi['navigation']['home'] ?? 'Trang ch·ªß',
                'marketplace' => 'Th·ªã tr∆∞·ªùng', // Fix inconsistent value
                'community' => $messagesVi['navigation']['community'] ?? 'C·ªông ƒë·ªìng',
                'forums' => $messagesVi['navigation']['forums'] ?? 'Di·ªÖn ƒë√†n',
                'showcases' => $messagesVi['navigation']['showcases'] ?? 'D·ª± √°n',
                'knowledge' => $messagesVi['navigation']['knowledge'] ?? 'Ki·∫øn th·ª©c',
                'help' => $messagesVi['navigation']['help'] ?? 'Tr·ª£ gi√∫p',
                'about' => $messagesVi['navigation']['about'] ?? 'Gi·ªõi thi·ªáu',
                'contact' => $messagesVi['navigation']['contact'] ?? 'Li√™n h·ªá',
            ],
            'user' => [
                'profile' => $messagesVi['navigation']['profile'] ?? 'H·ªì s∆°',
                'settings' => $messagesVi['navigation']['settings'] ?? 'C√†i ƒë·∫∑t',
                'dashboard' => $messagesVi['navigation']['dashboard'] ?? 'B·∫£ng ƒëi·ªÅu khi·ªÉn',
                'notifications' => $messagesVi['navigation']['notifications'] ?? 'Th√¥ng b√°o',
                'messages' => $messagesVi['navigation']['messages'] ?? 'Tin nh·∫Øn',
            ],
            'auth' => [
                'login' => $messagesVi['navigation']['login'] ?? 'ƒêƒÉng nh·∫≠p',
                'register' => $messagesVi['navigation']['register'] ?? 'ƒêƒÉng k√Ω',
                'logout' => $messagesVi['navigation']['logout'] ?? 'ƒêƒÉng xu·∫•t',
            ],
        ];

        $navKeysEn = [
            'main' => [
                'home' => $messagesEn['navigation']['home'] ?? 'Home',
                'marketplace' => 'Marketplace',
                'community' => $messagesEn['navigation']['community'] ?? 'Community',
                'forums' => $messagesEn['navigation']['forums'] ?? 'Forums',
                'showcases' => $messagesEn['navigation']['showcases'] ?? 'Showcases',
                'knowledge' => $messagesEn['navigation']['knowledge'] ?? 'Knowledge',
                'help' => $messagesEn['navigation']['help'] ?? 'Help',
                'about' => $messagesEn['navigation']['about'] ?? 'About',
                'contact' => $messagesEn['navigation']['contact'] ?? 'Contact',
            ],
            'user' => [
                'profile' => $messagesEn['navigation']['profile'] ?? 'Profile',
                'settings' => $messagesEn['navigation']['settings'] ?? 'Settings',
                'dashboard' => $messagesEn['navigation']['dashboard'] ?? 'Dashboard',
                'notifications' => $messagesEn['navigation']['notifications'] ?? 'Notifications',
                'messages' => $messagesEn['navigation']['messages'] ?? 'Messages',
            ],
            'auth' => [
                'login' => $messagesEn['navigation']['login'] ?? 'Login',
                'register' => $messagesEn['navigation']['register'] ?? 'Register',
                'logout' => $messagesEn['navigation']['logout'] ?? 'Logout',
            ],
        ];

        return ['vi' => $navKeysVi, 'en' => $navKeysEn];
    }

    private function extractUiKeys($messagesVi, $messagesEn)
    {
        $uiKeysVi = [
            'actions' => [
                'save' => 'L∆∞u',
                'cancel' => 'H·ªßy',
                'delete' => 'X√≥a',
                'edit' => 'S·ª≠a',
                'view' => 'Xem',
                'create' => 'T·∫°o',
                'update' => 'C·∫≠p nh·∫≠t',
                'submit' => 'G·ª≠i',
                'reset' => 'ƒê·∫∑t l·∫°i',
                'search' => 'T√¨m ki·∫øm',
                'filter' => 'L·ªçc',
                'sort' => 'S·∫Øp x·∫øp',
            ],
            'status' => [
                'loading' => 'ƒêang t·∫£i...',
                'saving' => 'ƒêang l∆∞u...',
                'success' => 'Th√†nh c√¥ng',
                'error' => 'L·ªói',
                'warning' => 'C·∫£nh b√°o',
                'info' => 'Th√¥ng tin',
            ],
            'common' => [
                'title' => 'Ti√™u ƒë·ªÅ',
                'description' => 'M√¥ t·∫£',
                'content' => 'N·ªôi dung',
                'views' => 'L∆∞·ª£t xem',
                'comments' => 'B√¨nh lu·∫≠n',
                'likes' => 'Th√≠ch',
                'updated' => 'C·∫≠p nh·∫≠t',
            ],
        ];

        $uiKeysEn = [
            'actions' => [
                'save' => 'Save',
                'cancel' => 'Cancel',
                'delete' => 'Delete',
                'edit' => 'Edit',
                'view' => 'View',
                'create' => 'Create',
                'update' => 'Update',
                'submit' => 'Submit',
                'reset' => 'Reset',
                'search' => 'Search',
                'filter' => 'Filter',
                'sort' => 'Sort',
            ],
            'status' => [
                'loading' => 'Loading...',
                'saving' => 'Saving...',
                'success' => 'Success',
                'error' => 'Error',
                'warning' => 'Warning',
                'info' => 'Information',
            ],
            'common' => [
                'title' => 'Title',
                'description' => 'Description',
                'content' => 'Content',
                'views' => 'Views',
                'comments' => 'Comments',
                'likes' => 'Likes',
                'updated' => 'Updated',
            ],
        ];

        return ['vi' => $uiKeysVi, 'en' => $uiKeysEn];
    }

    private function extractAuthKeys($messagesVi, $messagesEn)
    {
        // Extract auth-related keys from messages.php
        $authKeysVi = [
            'login' => [
                'title' => 'ƒêƒÉng nh·∫≠p',
                'email' => 'Email',
                'password' => 'M·∫≠t kh·∫©u',
                'remember' => 'Ghi nh·ªõ ƒëƒÉng nh·∫≠p',
                'forgot_password' => 'Qu√™n m·∫≠t kh·∫©u?',
                'submit' => 'ƒêƒÉng nh·∫≠p',
            ],
            'register' => [
                'title' => 'ƒêƒÉng k√Ω',
                'name' => 'H·ªç t√™n',
                'username' => 'T√™n ƒëƒÉng nh·∫≠p',
                'email' => 'Email',
                'password' => 'M·∫≠t kh·∫©u',
                'password_confirmation' => 'X√°c nh·∫≠n m·∫≠t kh·∫©u',
                'submit' => 'ƒêƒÉng k√Ω',
            ],
        ];

        $authKeysEn = [
            'login' => [
                'title' => 'Login',
                'email' => 'Email',
                'password' => 'Password',
                'remember' => 'Remember me',
                'forgot_password' => 'Forgot password?',
                'submit' => 'Login',
            ],
            'register' => [
                'title' => 'Register',
                'name' => 'Full name',
                'username' => 'Username',
                'email' => 'Email',
                'password' => 'Password',
                'password_confirmation' => 'Confirm password',
                'submit' => 'Register',
            ],
        ];

        return ['vi' => $authKeysVi, 'en' => $authKeysEn];
    }

    private function extractMarketplaceKeys($messagesVi, $messagesEn)
    {
        // Enhanced marketplace keys with cart functionality
        $marketplaceKeysVi = [
            'products' => [
                'title' => 'S·∫£n ph·∫©m',
                'all' => 'T·∫•t c·∫£ s·∫£n ph·∫©m',
                'featured' => 'S·∫£n ph·∫©m n·ªïi b·∫≠t',
                'add_to_cart' => 'Th√™m v√†o gi·ªè',
                'buy_now' => 'Mua ngay',
            ],
            'cart' => [
                'title' => 'Gi·ªè h√†ng',
                'empty' => 'Gi·ªè h√†ng tr·ªëng',
                'subtotal' => 'T·∫°m t√≠nh',
                'checkout' => 'Thanh to√°n',
                'remove' => 'X√≥a',
            ],
            'categories' => [
                'title' => 'Danh m·ª•c',
                'all' => 'T·∫•t c·∫£ danh m·ª•c',
            ],
        ];

        $marketplaceKeysEn = [
            'products' => [
                'title' => 'Products',
                'all' => 'All Products',
                'featured' => 'Featured Products',
                'add_to_cart' => 'Add to Cart',
                'buy_now' => 'Buy Now',
            ],
            'cart' => [
                'title' => 'Shopping Cart',
                'empty' => 'Cart is empty',
                'subtotal' => 'Subtotal',
                'checkout' => 'Checkout',
                'remove' => 'Remove',
            ],
            'categories' => [
                'title' => 'Categories',
                'all' => 'All Categories',
            ],
        ];

        return ['vi' => $marketplaceKeysVi, 'en' => $marketplaceKeysEn];
    }

    private function extractForumKeys($messagesVi, $messagesEn)
    {
        // Enhanced forum keys
        $forumKeysVi = [
            'forums' => [
                'title' => 'Di·ªÖn ƒë√†n',
                'categories' => 'Danh m·ª•c di·ªÖn ƒë√†n',
                'latest' => 'M·ªõi nh·∫•t',
                'popular' => 'Ph·ªï bi·∫øn',
            ],
            'threads' => [
                'title' => 'Ch·ªß ƒë·ªÅ',
                'create' => 'T·∫°o ch·ªß ƒë·ªÅ',
                'reply' => 'Tr·∫£ l·ªùi',
                'views' => 'L∆∞·ª£t xem',
                'replies' => 'Tr·∫£ l·ªùi',
            ],
            'search' => [
                'title' => 'T√¨m ki·∫øm',
                'placeholder' => 'T√¨m ki·∫øm trong di·ªÖn ƒë√†n...',
                'advanced' => 'T√¨m ki·∫øm n√¢ng cao',
                'results' => 'K·∫øt qu·∫£',
            ],
        ];

        $forumKeysEn = [
            'forums' => [
                'title' => 'Forums',
                'categories' => 'Forum Categories',
                'latest' => 'Latest',
                'popular' => 'Popular',
            ],
            'threads' => [
                'title' => 'Threads',
                'create' => 'Create Thread',
                'reply' => 'Reply',
                'views' => 'Views',
                'replies' => 'Replies',
            ],
            'search' => [
                'title' => 'Search',
                'placeholder' => 'Search in forums...',
                'advanced' => 'Advanced Search',
                'results' => 'Results',
            ],
        ];

        return ['vi' => $forumKeysVi, 'en' => $forumKeysEn];
    }

    private function extractCommonKeys($messagesVi, $messagesEn)
    {
        $commonKeysVi = [
            'site' => [
                'name' => 'MechaMap',
                'tagline' => 'Di·ªÖn ƒë√†n c·ªông ƒë·ªìng',
                'description' => 'MechaMap - Di·ªÖn ƒë√†n c·ªông ƒë·ªìng chia s·∫ª ki·∫øn th·ª©c v√† kinh nghi·ªám',
            ],
            'time' => [
                'just_now' => 'V·ª´a xong',
                'minutes_ago' => 'ph√∫t tr∆∞·ªõc',
                'hours_ago' => 'gi·ªù tr∆∞·ªõc',
                'days_ago' => 'ng√†y tr∆∞·ªõc',
                'updated' => 'C·∫≠p nh·∫≠t',
                'created' => 'T·∫°o',
            ],
        ];

        $commonKeysEn = [
            'site' => [
                'name' => 'MechaMap',
                'tagline' => 'Community Forum',
                'description' => 'MechaMap - Community forum for sharing knowledge and experience',
            ],
            'time' => [
                'just_now' => 'Just now',
                'minutes_ago' => 'minutes ago',
                'hours_ago' => 'hours ago',
                'days_ago' => 'days ago',
                'updated' => 'Updated',
                'created' => 'Created',
            ],
        ];

        return ['vi' => $commonKeysVi, 'en' => $commonKeysEn];
    }

    private function createLanguageFile($relativePath, $data)
    {
        $fullPath = $this->basePath . '/' . $relativePath;
        $this->log("üìù Creating: {$relativePath}");

        if (!$this->dryRun) {
            $content = "<?php\n\nreturn " . $this->arrayToPhp($data, 0) . ";\n";
            file_put_contents($fullPath, $content);
        }

        $this->migrationLog[] = [
            'action' => 'create',
            'file' => $relativePath,
            'keys_count' => $this->countKeys($data),
        ];
    }

    private function eliminateDuplicates()
    {
        $this->log("üîÑ Eliminating duplicates...");

        $duplicateFiles = [
            'vi/buttons.php',
            'vi/forms.php',
            // Add other files with duplicates
        ];

        foreach ($duplicateFiles as $file) {
            $this->removeDuplicateKeys($file);
        }
    }

    private function removeDuplicateKeys($relativePath)
    {
        $fullPath = $this->basePath . '/' . $relativePath;

        if (!file_exists($fullPath)) {
            return;
        }

        $this->log("üßπ Cleaning duplicates from: {$relativePath}");

        if (!$this->dryRun) {
            $data = include $fullPath;

            // Remove specific duplicate keys
            $keysToRemove = ['home', 'login', 'search', 'marketplace'];

            foreach ($keysToRemove as $key) {
                if (isset($data[$key])) {
                    unset($data[$key]);
                    $this->log("  - Removed duplicate key: {$key}");
                }
            }

            $content = "<?php\n\nreturn " . $this->arrayToPhp($data, 0) . ";\n";
            file_put_contents($fullPath, $content);
        }
    }

    private function validateMigration()
    {
        $this->log("‚úÖ Validating migration...");

        // Check if new files exist and are valid PHP
        $newFiles = ['nav.php', 'ui.php', 'auth.php', 'common.php'];

        foreach (['vi', 'en'] as $locale) {
            foreach ($newFiles as $file) {
                $path = $this->basePath . "/{$locale}/{$file}";

                if (!$this->dryRun && !file_exists($path)) {
                    throw new Exception("Migration failed: {$path} not created");
                }

                if (!$this->dryRun) {
                    $data = include $path;
                    if (!is_array($data)) {
                        throw new Exception("Migration failed: {$path} invalid format");
                    }
                }
            }
        }

        $this->log("‚úÖ Migration validation passed");
    }

    private function generateReport()
    {
        $this->log("\nüìä MIGRATION REPORT");
        $this->log("==================");

        foreach ($this->migrationLog as $entry) {
            $this->log("‚úÖ {$entry['action']}: {$entry['file']} ({$entry['keys_count']} keys)");
        }

        $this->log("\nüéØ Next Steps:");
        $this->log("1. Update view references from __('messages.*') to new structure");
        $this->log("2. Test language switching functionality");
        $this->log("3. Remove old oversized messages.php files");
    }

    private function arrayToPhp($array, $indent = 0)
    {
        $spaces = str_repeat('    ', $indent);
        $result = "[\n";

        foreach ($array as $key => $value) {
            $result .= $spaces . "    '{$key}' => ";

            if (is_array($value)) {
                $result .= $this->arrayToPhp($value, $indent + 1);
            } else {
                $result .= "'" . addslashes($value) . "'";
            }

            $result .= ",\n";
        }

        $result .= $spaces . "]";
        return $result;
    }

    private function countKeys($array)
    {
        $count = 0;
        foreach ($array as $value) {
            if (is_array($value)) {
                $count += $this->countKeys($value);
            } else {
                $count++;
            }
        }
        return $count;
    }

    private function executeCommand($command)
    {
        if ($this->verbose) {
            $this->log("üîß Executing: {$command}");
        }

        if (!$this->dryRun) {
            exec($command, $output, $returnCode);
            if ($returnCode !== 0) {
                throw new Exception("Command failed: {$command}");
            }
        }
    }

    private function log($message)
    {
        echo "[" . date('H:i:s') . "] {$message}\n";
    }
}

// CLI execution
if (php_sapi_name() === 'cli') {
    $options = [];

    foreach ($argv as $arg) {
        if ($arg === '--dry-run') {
            $options['dry-run'] = true;
        }
        if ($arg === '--verbose') {
            $options['verbose'] = true;
        }
    }

    try {
        $migration = new LanguageMigration();
        $migration->run($options);
    } catch (Exception $e) {
        echo "‚ùå Error: " . $e->getMessage() . "\n";
        exit(1);
    }
}
