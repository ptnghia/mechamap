<?php

/**
 * Script ƒë·ªÉ th√™m translation key ui.users.online v√†o database
 * T·ª± ƒë·ªông b·ªè qua n·∫øu key ƒë√£ t·ªìn t·∫°i
 *
 * Usage: php scripts/add_ui_users_online_translation.php
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

// Bootstrap Laravel application
$app = require_once __DIR__ . '/../bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

echo "üîß Script th√™m translation key ui.users.online\n";
echo "================================================\n\n";

try {
    // Translation key c·∫ßn th√™m
    $translationKey = 'ui.users.online';
    $groupName = 'ui';
    $vietnameseContent = 'Tr·ª±c tuy·∫øn';
    $englishContent = 'Online';

    echo "üìù Ki·ªÉm tra translation key: {$translationKey}\n";

    // Ki·ªÉm tra xem key ƒë√£ t·ªìn t·∫°i ch∆∞a
    $existingVietnamese = DB::table('translations')
        ->where('key', $translationKey)
        ->where('locale', 'vi')
        ->first();

    $existingEnglish = DB::table('translations')
        ->where('key', $translationKey)
        ->where('locale', 'en')
        ->first();

    $now = Carbon::now();
    $addedCount = 0;

    // Th√™m Vietnamese translation n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!$existingVietnamese) {
        DB::table('translations')->insert([
            'key' => $translationKey,
            'locale' => 'vi',
            'content' => $vietnameseContent,
            'group' => $group,
            'created_at' => $now,
            'updated_at' => $now,
        ]);
        echo "‚úÖ ƒê√£ th√™m Vietnamese translation: {$translationKey} = '{$vietnameseContent}'\n";
        $addedCount++;
    } else {
        echo "‚è≠Ô∏è  Vietnamese translation ƒë√£ t·ªìn t·∫°i: {$translationKey} = '{$existingVietnamese->content}'\n";
    }

    // Th√™m English translation n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!$existingEnglish) {
        DB::table('translations')->insert([
            'key' => $translationKey,
            'locale' => 'en',
            'content' => $englishContent,
            'group' => $group,
            'created_at' => $now,
            'updated_at' => $now,
        ]);
        echo "‚úÖ ƒê√£ th√™m English translation: {$translationKey} = '{$englishContent}'\n";
        $addedCount++;
    } else {
        echo "‚è≠Ô∏è  English translation ƒë√£ t·ªìn t·∫°i: {$translationKey} = '{$existingEnglish->content}'\n";
    }

    echo "\n";

    if ($addedCount > 0) {
        echo "üéâ Ho√†n th√†nh! ƒê√£ th√™m {$addedCount} translation(s) m·ªõi.\n";
        echo "üí° L∆∞u √Ω: Cache s·∫Ω ƒë∆∞·ª£c clear t·ª± ƒë·ªông khi s·ª≠ d·ª•ng translation.\n";
    } else {
        echo "‚ÑπÔ∏è  Kh√¥ng c√≥ translation n√†o ƒë∆∞·ª£c th√™m (t·∫•t c·∫£ ƒë√£ t·ªìn t·∫°i).\n";
    }

    // Hi·ªÉn th·ªã th·ªëng k√™
    echo "\nüìä Th·ªëng k√™ translations trong group 'ui':\n";
    $uiTranslations = DB::table('translations')
        ->where('group', 'ui')
        ->selectRaw('locale, COUNT(*) as count')
        ->groupBy('locale')
        ->get();

    foreach ($uiTranslations as $stat) {
        echo "   - {$stat->locale}: {$stat->count} keys\n";
    }

} catch (Exception $e) {
    echo "‚ùå L·ªói: " . $e->getMessage() . "\n";
    echo "üìç File: " . $e->getFile() . " (line " . $e->getLine() . ")\n";
    exit(1);
}

echo "\n‚ú® Script ho√†n th√†nh!\n";
