<?php

/**
 * CHECK HARDCODED STRINGS IN BLADE FILES
 * Ki·ªÉm tra t·∫•t c·∫£ file blade (tr·ª´ /admin) xem c√≤n hardcoded strings kh√¥ng
 */

echo "=== CHECKING HARDCODED STRINGS IN BLADE FILES ===\n\n";

// Function to scan directory for blade files
function scanBladeFiles($directory, $excludePaths = []) {
    $files = [];
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($directory)
    );
    
    foreach ($iterator as $file) {
        if ($file->isFile() && $file->getExtension() === 'php') {
            $path = $file->getPathname();
            
            // Check if path should be excluded
            $shouldExclude = false;
            foreach ($excludePaths as $excludePath) {
                if (strpos($path, $excludePath) !== false) {
                    $shouldExclude = true;
                    break;
                }
            }
            
            if (!$shouldExclude) {
                $files[] = $path;
            }
        }
    }
    
    return $files;
}

// Function to detect hardcoded strings
function detectHardcodedStrings($content, $filePath) {
    $hardcodedStrings = [];
    
    // Patterns for hardcoded Vietnamese strings
    $patterns = [
        // Vietnamese text in quotes (not in translation functions)
        '/(?<!__\(|@lang\(|trans\()[\'"]([^\'\"]*[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë][^\'\"]*)[\'"]/',
        
        // Common Vietnamese words in quotes
        '/[\'\"](.*(?:trang ch·ªß|di·ªÖn ƒë√†n|th·ªã tr∆∞·ªùng|ƒëƒÉng nh·∫≠p|ƒëƒÉng k√Ω|ƒëƒÉng xu·∫•t|t√¨m ki·∫øm|h·ªì s∆°|c√†i ƒë·∫∑t|th√¥ng b√°o|tin nh·∫Øn|b√†i vi·∫øt|ch·ªß ƒë·ªÅ|b√¨nh lu·∫≠n|th√≠ch|chia s·∫ª|l∆∞u|ch·ªânh s·ª≠a|x√≥a|t·∫°o|c·∫≠p nh·∫≠t|xem|t·∫£i xu·ªëng|t·∫£i l√™n|g·ª≠i|nh·∫≠n|m·ªü|ƒë√≥ng|b·∫Øt ƒë·∫ßu|k·∫øt th√∫c|ti·∫øp t·ª•c|h·ªßy|x√°c nh·∫≠n|th√†nh c√¥ng|th·∫•t b·∫°i|l·ªói|c·∫£nh b√°o|th√¥ng tin|chi ti·∫øt|danh s√°ch|b√°o c√°o|th·ªëng k√™|k·∫øt qu·∫£|d·ªØ li·ªáu|h√¨nh ·∫£nh|t√†i li·ªáu|li√™n k·∫øt|email|ƒëi·ªán tho·∫°i|ƒë·ªãa ch·ªâ|m√¥ t·∫£|ti√™u ƒë·ªÅ|n·ªôi dung|ng√†y|th·ªùi gian|h√¥m nay|h√¥m qua|ng√†y mai|b√¢y gi·ªù|ho·∫°t ƒë·ªông|c√¥ng khai|ri√™ng t∆∞|mi·ªÖn ph√≠|tr·∫£ ph√≠).*)[\'\"]/i',
        
        // Common English hardcoded strings (not in translation functions)
        '/(?<!__\(|@lang\(|trans\()[\'\"]((?:Home|Forums?|Marketplace|Login|Register|Logout|Search|Profile|Settings|Notifications?|Messages?|Posts?|Topics?|Comments?|Like|Share|Save|Edit|Delete|Create|Update|View|Download|Upload|Send|Receive|Open|Close|Start|End|Continue|Cancel|Confirm|Success|Failed?|Error|Warning|Information|Details?|List|Report|Statistics|Results?|Data|Image|Document|Link|Email|Phone|Address|Description|Title|Content|Date|Time|Today|Yesterday|Tomorrow|Now|Active|Public|Private|Free|Paid|Loading|Please wait|Click here|Read more|Show more|Show less|Back|Next|Previous|First|Last|All|None|Yes|No|OK|Submit|Reset|Clear|Apply|Filter|Sort|Export|Import|Print|Copy|Cut|Paste|Undo|Redo|Help|About|Contact|Support|FAQ|Terms|Privacy|Policy|License|Version|Admin|User|Guest|Member|Moderator|Administrator)[^\'\"]*)[\'\"]/i',
        
        // Text in HTML elements (not in translation functions)
        '/(?<!__\(|@lang\(|trans\()>([^<]*[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë][^<]*)</u',
    ];
    
    foreach ($patterns as $pattern) {
        preg_match_all($pattern, $content, $matches, PREG_OFFSET_CAPTURE);
        
        foreach ($matches[1] as $match) {
            $text = trim($match[0]);
            $position = $match[1];
            
            // Skip if empty or too short
            if (strlen($text) < 3) continue;
            
            // Skip if it's a variable or PHP code
            if (preg_match('/^\$|->|::|function|class|namespace|use |return |echo |print /', $text)) continue;
            
            // Skip if it's a URL, email, or technical string
            if (preg_match('/^(https?:\/\/|mailto:|[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|[a-zA-Z0-9._-]+\.(css|js|png|jpg|jpeg|gif|svg|pdf|doc|docx|xls|xlsx|zip|rar))/', $text)) continue;
            
            // Skip if it's a CSS class or ID
            if (preg_match('/^[a-zA-Z0-9._-]+$/', $text) && strlen($text) < 20) continue;
            
            // Skip if it's already a translation key format
            if (preg_match('/^[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+/', $text)) continue;
            
            // Get line number
            $lineNumber = substr_count(substr($content, 0, $position), "\n") + 1;
            
            $hardcodedStrings[] = [
                'text' => $text,
                'line' => $lineNumber,
                'context' => trim(substr($content, max(0, $position - 50), 100))
            ];
        }
    }
    
    return $hardcodedStrings;
}

// Scan all blade files
$viewsDirectory = __DIR__ . '/resources/views';
$excludePaths = ['/admin/', '\\admin\\'];

echo "üîç Scanning blade files in: $viewsDirectory\n";
echo "‚ùå Excluding: " . implode(', ', $excludePaths) . "\n\n";

$bladeFiles = scanBladeFiles($viewsDirectory, $excludePaths);

echo "üìÅ Found " . count($bladeFiles) . " blade files to check\n\n";

$totalHardcodedStrings = 0;
$filesWithHardcoded = 0;
$allHardcodedStrings = [];

foreach ($bladeFiles as $filePath) {
    $relativePath = str_replace(__DIR__ . '/resources/views/', '', $filePath);
    
    $content = file_get_contents($filePath);
    if ($content === false) {
        echo "‚ùå Failed to read: $relativePath\n";
        continue;
    }
    
    $hardcodedStrings = detectHardcodedStrings($content, $filePath);
    
    if (!empty($hardcodedStrings)) {
        $filesWithHardcoded++;
        $fileHardcodedCount = count($hardcodedStrings);
        $totalHardcodedStrings += $fileHardcodedCount;
        
        echo "‚ö†Ô∏è  $relativePath ($fileHardcodedCount hardcoded strings)\n";
        
        // Show first 5 hardcoded strings
        $showCount = min(5, $fileHardcodedCount);
        for ($i = 0; $i < $showCount; $i++) {
            $string = $hardcodedStrings[$i];
            echo "  Line {$string['line']}: \"{$string['text']}\"\n";
        }
        
        if ($fileHardcodedCount > 5) {
            echo "  ... and " . ($fileHardcodedCount - 5) . " more\n";
        }
        
        echo "\n";
        
        // Store for summary
        $allHardcodedStrings[$relativePath] = $hardcodedStrings;
    }
}

// Summary
echo "=== SUMMARY ===\n";
echo "Total blade files checked: " . count($bladeFiles) . "\n";
echo "Files with hardcoded strings: $filesWithHardcoded\n";
echo "Total hardcoded strings found: $totalHardcodedStrings\n";

if ($filesWithHardcoded > 0) {
    $percentage = round(($filesWithHardcoded / count($bladeFiles)) * 100, 2);
    echo "Percentage of files with hardcoded: $percentage%\n";
    
    echo "\nüìä TOP 10 FILES WITH MOST HARDCODED STRINGS:\n";
    
    // Sort files by number of hardcoded strings
    uasort($allHardcodedStrings, function($a, $b) {
        return count($b) - count($a);
    });
    
    $count = 0;
    foreach ($allHardcodedStrings as $file => $strings) {
        if ($count >= 10) break;
        echo "  " . ($count + 1) . ". $file (" . count($strings) . " strings)\n";
        $count++;
    }
    
    echo "\nüîß RECOMMENDATIONS:\n";
    echo "1. Replace hardcoded strings with translation keys\n";
    echo "2. Use __('key') or @lang('key') for all user-facing text\n";
    echo "3. Move hardcoded strings to appropriate translation files\n";
    echo "4. Test translations after making changes\n";
} else {
    echo "\n‚úÖ EXCELLENT! No hardcoded strings found in blade files!\n";
    echo "üéâ All user-facing text is properly using translation functions.\n";
}

echo "\n‚úÖ Hardcoded strings check completed at " . date('Y-m-d H:i:s') . "\n";
?>
