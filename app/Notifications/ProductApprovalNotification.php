<?php

namespace App\Notifications;

use App\Models\MarketplaceProduct;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class ProductApprovalNotification extends Notification implements ShouldQueue
{
    use Queueable;

    public $product;
    public $status;
    public $rejectionReason;

    /**
     * Create a new notification instance.
     */
    public function __construct(MarketplaceProduct $product, string $status, string $rejectionReason = null)
    {
        $this->product = $product;
        $this->status = $status;
        $this->rejectionReason = $rejectionReason;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail', 'database'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        $mailMessage = new MailMessage();

        if ($this->status === 'approved') {
            $mailMessage
                ->subject('üéâ S·∫£n ph·∫©m c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát - MechaMap')
                ->greeting('Ch√∫c m·ª´ng!')
                ->line("S·∫£n ph·∫©m \"{$this->product->name}\" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† hi·ªán ƒë√£ c√≥ m·∫∑t tr√™n MechaMap Marketplace.")
                ->line('Kh√°ch h√†ng c√≥ th·ªÉ t√¨m th·∫•y v√† mua s·∫£n ph·∫©m c·ªßa b·∫°n ngay b√¢y gi·ªù.')
                ->action('Xem S·∫£n Ph·∫©m', route('marketplace.products.show', $this->product->slug))
                ->line('C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng MechaMap!')
                ->salutation('Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© MechaMap');
        } else {
            $mailMessage
                ->subject('‚ùå S·∫£n ph·∫©m c·ªßa b·∫°n c·∫ßn ƒë∆∞·ª£c ch·ªânh s·ª≠a - MechaMap')
                ->greeting('Th√¥ng b√°o v·ªÅ s·∫£n ph·∫©m')
                ->line("S·∫£n ph·∫©m \"{$this->product->name}\" c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát v√† c·∫ßn ch·ªânh s·ª≠a.")
                ->line("**L√Ω do:** {$this->rejectionReason}")
                ->line('Vui l√≤ng ch·ªânh s·ª≠a s·∫£n ph·∫©m theo y√™u c·∫ßu v√† g·ª≠i l·∫°i ƒë·ªÉ ƒë∆∞·ª£c duy·ªát.')
                ->action('Ch·ªânh S·ª≠a S·∫£n Ph·∫©m', $this->getEditUrl())
                ->line('N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.')
                ->salutation('Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© MechaMap');
        }

        return $mailMessage;
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            'product_id' => $this->product->id,
            'product_name' => $this->product->name,
            'status' => $this->status,
            'rejection_reason' => $this->rejectionReason,
            'message' => $this->getNotificationMessage(),
            'action_url' => $this->getActionUrl(),
        ];
    }

    /**
     * Get notification message based on status
     */
    private function getNotificationMessage(): string
    {
        if ($this->status === 'approved') {
            return "S·∫£n ph·∫©m \"{$this->product->name}\" ƒë√£ ƒë∆∞·ª£c duy·ªát v√† hi·ªán c√≥ m·∫∑t tr√™n marketplace.";
        } else {
            return "S·∫£n ph·∫©m \"{$this->product->name}\" c·∫ßn ch·ªânh s·ª≠a: {$this->rejectionReason}";
        }
    }

    /**
     * Get action URL based on status
     */
    private function getActionUrl(): string
    {
        if ($this->status === 'approved') {
            return route('marketplace.products.show', $this->product->slug);
        } else {
            return $this->getEditUrl();
        }
    }

    /**
     * Get edit URL based on seller type
     */
    private function getEditUrl(): string
    {
        switch ($this->product->seller_type) {
            case 'supplier':
                return route('supplier.products.edit', $this->product);
            case 'manufacturer':
                return route('manufacturer.products.edit', $this->product);
            case 'brand':
                return route('brand.products.edit', $this->product);
            default:
                return route('marketplace.products.show', $this->product->slug);
        }
    }
}
