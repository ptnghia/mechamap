<?php

namespace App\Services;

use App\Models\User;

/**
 * Service qu·∫£n l√Ω ph√¢n quy·ªÅn chi ti·∫øt cho h·ªá th·ªëng MechaMap
 * üéØ Updated for MechaMap User Management Restructure - Phase 1
 * H·ªó tr·ª£ 4 nh√≥m v·ªõi 14 roles v√† 64 permissions
 */
class PermissionService
{
    /**
     * Ki·ªÉm tra user c√≥ permission kh√¥ng (s·ª≠ d·ª•ng Spatie Permission)
     *
     * @param User $user
     * @param string $permission
     * @return bool
     */
    public static function hasPermission(User $user, string $permission): bool
    {
        // Super Admin c√≥ t·∫•t c·∫£ quy·ªÅn
        if ($user->role === 'super_admin') {
            return true;
        }

        // S·ª≠ d·ª•ng Spatie Permission
        return $user->hasPermissionTo($permission);
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ truy c·∫≠p admin panel kh√¥ng
     *
     * @param User $user
     * @return bool
     */
    public static function canAccessAdmin(User $user): bool
    {
        return $user->canAccessAdmin();
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ truy c·∫≠p marketplace kh√¥ng
     *
     * @param User $user
     * @return bool
     */
    public static function canAccessMarketplace(User $user): bool
    {
        return in_array($user->role_group, ['business_partners']) ||
               $user->hasPermissionTo('manage-marketplace') ||
               $user->hasPermissionTo('view-content');
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ b√°n h√†ng kh√¥ng
     *
     * @param User $user
     * @return bool
     */
    public static function canSell(User $user): bool
    {
        return $user->hasPermissionTo('sell-products');
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ mua h√†ng kh√¥ng
     *
     * @param User $user
     * @return bool
     */
    public static function canBuy(User $user): bool
    {
        // Guest kh√¥ng th·ªÉ mua h√†ng - c·∫ßn ƒëƒÉng k√Ω
        return !in_array($user->role, ['guest']) &&
               auth()->check() &&
               $user->hasPermissionTo('view-content');
    }

    /**
     * L·∫•y role hierarchy level
     *
     * @param User $user
     * @return int
     */
    public static function getRoleLevel(User $user): int
    {
        $hierarchy = config('mechamap_permissions.role_hierarchy');
        return $hierarchy[$user->role] ?? 999;
    }

    /**
     * Ki·ªÉm tra user c√≥ level cao h∆°n user kh√°c kh√¥ng
     *
     * @param User $user1
     * @param User $user2
     * @return bool
     */
    public static function hasHigherLevel(User $user1, User $user2): bool
    {
        return self::getRoleLevel($user1) < self::getRoleLevel($user2);
    }

    /**
     * L·∫•y marketplace features cho role
     *
     * @param User $user
     * @return array
     */
    public static function getMarketplaceFeatures(User $user): array
    {
        $features = config('mechamap_permissions.marketplace_features');
        return $features[$user->role] ?? [];
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ moderate user kh√°c kh√¥ng
     *
     * @param User $moderator
     * @param User $target
     * @return bool
     */
    public static function canModerate(User $moderator, User $target): bool
    {
        // Super admin c√≥ th·ªÉ moderate t·∫•t c·∫£
        if ($moderator->role === 'super_admin') {
            return true;
        }

        // Kh√¥ng th·ªÉ moderate user c√πng level ho·∫∑c cao h∆°n
        return self::hasHigherLevel($moderator, $target);
    }

    /**
     * L·∫•y t·∫•t c·∫£ permissions c·ªßa user
     *
     * @param User $user
     * @return array
     */
    public static function getUserPermissions(User $user): array
    {
        return $user->getAllPermissions()->pluck('name')->toArray();
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ truy c·∫≠p route kh√¥ng
     *
     * @param User $user
     * @param string $routeName
     * @return bool
     */
    public static function canAccessRoute(User $user, string $routeName): bool
    {
        // Super admin c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£
        if ($user->role === 'super_admin') {
            return true;
        }

        $adminRoutes = config('mechamap_permissions.admin_routes');

        // Ki·ªÉm tra theo role group
        foreach ($adminRoutes as $group => $routes) {
            if ($user->role_group === $group) {
                foreach ($routes as $pattern) {
                    if (str_contains($pattern, '*')) {
                        $regex = str_replace('*', '.*', $pattern);
                        if (preg_match('/^' . $regex . '$/', $routeName)) {
                            return true;
                        }
                    } elseif ($pattern === $routeName) {
                        return true;
                    }
                }
            }
        }

        return false;
    }
}
