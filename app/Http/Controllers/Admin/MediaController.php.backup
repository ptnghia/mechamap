<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Media;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\View\View;

class MediaController extends Controller
{
    /**
     * Hiển thị danh sách media
     */
    public function index(Request $request): View
    {
        // Lấy các tham số lọc
        $type = $request->input('type');
        $search = $request->input('search');

        // Khởi tạo query
        $query = Media::with('user');

        // Áp dụng các bộ lọc
        if ($type) {
            $query->where('file_type', 'like', "{$type}/%");
        }

        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('title', 'like', "%{$search}%")
                    ->orWhere('description', 'like', "%{$search}%")
                    ->orWhere('file_name', 'like', "%{$search}%");
            });
        }

        // Sắp xếp và phân trang
        $media = $query->orderBy('created_at', 'desc')->paginate(24);

        // Breadcrumbs
        $breadcrumbs = [
            ['title' => 'Quản lý Media', 'url' => route('admin.media.index')]
        ];

        return view('admin.media.index', compact('media', 'breadcrumbs', 'type', 'search'));
    }

    /**
     * Hiển thị form tải lên media mới
     */
    public function create(): View
    {
        // Breadcrumbs
        $breadcrumbs = [
            ['title' => 'Quản lý Media', 'url' => route('admin.media.index')],
            ['title' => 'Tải lên media mới', 'url' => route('admin.media.create')]
        ];

        return view('admin.media.create', compact('breadcrumbs'));
    }

    /**
     * Lưu media mới
     */
    public function store(Request $request)
    {
        $request->validate([
            'files' => 'required|array',
            'files.*' => 'required|file|mimes:jpeg,png,jpg,gif,svg,webp,avif,pdf,doc,docx,xls,xlsx,ppt,pptx,zip,rar|max:10240',
            'title' => 'nullable|string|max:255',
            'description' => 'nullable|string',
        ]);

        $uploadedFiles = [];

        foreach ($request->file('files') as $file) {
            $fileName = time() . '_' . $file->getClientOriginalName();
            $fileType = $file->getMimeType();

            // Xác định thư mục lưu trữ dựa trên loại file
            $folder = 'other';
            if (strpos($fileType, 'image') !== false) {
                $folder = 'images';
            } elseif (strpos($fileType, 'video') !== false) {
                $folder = 'videos';
            } elseif (strpos($fileType, 'audio') !== false) {
                $folder = 'audios';
            } elseif (strpos($fileType, 'pdf') !== false || strpos($fileType, 'document') !== false || strpos($fileType, 'spreadsheet') !== false || strpos($fileType, 'presentation') !== false) {
                $folder = 'documents';
            }

            $filePath = $file->storeAs($folder, $fileName, 'public');

            $media = new Media();
            $media->user_id = Auth::id();
            $media->file_name = $fileName;
            $media->file_path = $filePath;
            $media->mime_type = $fileType;
            $media->file_size = $file->getSize();
            $media->title = $request->title ?? $file->getClientOriginalName();
            $media->description = $request->description;
            $media->save();

            $uploadedFiles[] = $media;
        }

        return redirect()->route('admin.media.index')
            ->with('success', count($uploadedFiles) . ' file đã được tải lên thành công.');
    }

    /**
     * Hiển thị chi tiết media
     */
    public function show(Media $media): View
    {
        $media->load('user');

        // Breadcrumbs
        $breadcrumbs = [
            ['title' => 'Quản lý Media', 'url' => route('admin.media.index')],
            ['title' => $media->title, 'url' => route('admin.media.show', $media)]
        ];

        return view('admin.media.show', compact('media', 'breadcrumbs'));
    }

    /**
     * Hiển thị form chỉnh sửa media
     */
    public function edit(Media $media): View
    {
        // Breadcrumbs
        $breadcrumbs = [
            ['title' => 'Quản lý Media', 'url' => route('admin.media.index')],
            ['title' => 'Chỉnh sửa media', 'url' => route('admin.media.edit', $media)]
        ];

        return view('admin.media.edit', compact('media', 'breadcrumbs'));
    }

    /**
     * Cập nhật media
     */
    public function update(Request $request, Media $media)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $media->title = $request->title;
        $media->description = $request->description;
        $media->save();

        return redirect()->route('admin.media.index')
            ->with('success', 'Media đã được cập nhật thành công.');
    }

    /**
     * Xóa media
     */
    public function destroy(Media $media)
    {
        // Xóa file từ storage
        Storage::disk('public')->delete($media->file_path);

        // Xóa record từ database
        $media->delete();

        return redirect()->route('admin.media.index')
            ->with('success', 'Media đã được xóa thành công.');
    }

    /**
     * Tải xuống media
     */
    public function download(Media $media)
    {
        return Storage::disk('public')->download($media->file_path, $media->file_name);
    }

    /**
     * Hiển thị thư viện media cho trình soạn thảo
     */
    public function library(Request $request)
    {
        // Lấy các tham số lọc
        $type = $request->input('type', 'image');
        $search = $request->input('search');

        // Khởi tạo query
        $query = Media::with('user');

        // Áp dụng các bộ lọc
        if ($type === 'image') {
            $query->where('mime_type', 'like', "image/%");
        } elseif ($type === 'document') {
            $query->where(function ($q) {
                $q->where('mime_type', 'like', "application/pdf")
                    ->orWhere('mime_type', 'like', "application/msword")
                    ->orWhere('mime_type', 'like', "application/vnd.openxmlformats-officedocument.%")
                    ->orWhere('mime_type', 'like', "application/vnd.ms-%");
            });
        }

        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('title', 'like', "%{$search}%")
                    ->orWhere('description', 'like', "%{$search}%")
                    ->orWhere('file_name', 'like', "%{$search}%");
            });
        }

        // Sắp xếp và phân trang
        $media = $query->orderBy('created_at', 'desc')->paginate(24);

        return response()->json([
            'media' => $media,
            'pagination' => [
                'total' => $media->total(),
                'per_page' => $media->perPage(),
                'current_page' => $media->currentPage(),
                'last_page' => $media->lastPage(),
            ]
        ]);
    }
}
