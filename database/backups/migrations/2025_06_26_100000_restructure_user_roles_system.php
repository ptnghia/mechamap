<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     * 
     * üéØ MechaMap User Management Restructure - Phase 1
     * C·∫≠p nh·∫≠t h·ªá th·ªëng roles t·ª´ 8 roles c≈© sang 12 roles m·ªõi theo 4 nh√≥m
     */
    public function up(): void
    {
        // T·∫°o b·∫£ng mapping roles c≈© sang roles m·ªõi
        $roleMapping = [
            // Roles c≈© => Roles m·ªõi
            'admin' => 'super_admin',
            'moderator' => 'content_moderator',
            'senior' => 'senior_member',
            'member' => 'member',
            'guest' => 'guest',
            'supplier' => 'supplier',
            'manufacturer' => 'manufacturer',
            'brand' => 'brand',
        ];

        // C·∫≠p nh·∫≠t role column trong users table ƒë·ªÉ h·ªó tr·ª£ roles m·ªõi
        DB::statement("ALTER TABLE users MODIFY COLUMN role VARCHAR(50) DEFAULT 'member'");

        // C·∫≠p nh·∫≠t existing users v·ªõi roles m·ªõi
        foreach ($roleMapping as $oldRole => $newRole) {
            DB::table('users')
                ->where('role', $oldRole)
                ->update(['role' => $newRole]);
        }

        // Th√™m index cho role column ƒë·ªÉ t·ªëi ∆∞u performance
        Schema::table('users', function (Blueprint $table) {
            $table->index('role', 'users_role_index');
        });

        // Th√™m c√°c columns m·ªõi cho business roles n·∫øu ch∆∞a c√≥
        if (!Schema::hasColumn('users', 'role_group')) {
            Schema::table('users', function (Blueprint $table) {
                $table->enum('role_group', [
                    'system_management',
                    'community_management', 
                    'community_members',
                    'business_partners'
                ])->nullable()->after('role')
                ->comment('Nh√≥m ph√¢n quy·ªÅn ch√≠nh');

                $table->json('role_permissions')->nullable()->after('role_group')
                    ->comment('Cache permissions cho role');

                $table->timestamp('role_updated_at')->nullable()->after('role_permissions')
                    ->comment('Th·ªùi gian c·∫≠p nh·∫≠t role g·∫ßn nh·∫•t');
            });
        }

        // C·∫≠p nh·∫≠t role_group cho existing users
        $roleGroups = [
            'super_admin' => 'system_management',
            'system_admin' => 'system_management',
            'content_admin' => 'system_management',
            'content_moderator' => 'community_management',
            'marketplace_moderator' => 'community_management',
            'community_moderator' => 'community_management',
            'senior_member' => 'community_members',
            'member' => 'community_members',
            'guest' => 'community_members',
            'student' => 'community_members',
            'manufacturer' => 'business_partners',
            'supplier' => 'business_partners',
            'brand' => 'business_partners',
            'verified_partner' => 'business_partners',
        ];

        foreach ($roleGroups as $role => $group) {
            DB::table('users')
                ->where('role', $role)
                ->update([
                    'role_group' => $group,
                    'role_updated_at' => now()
                ]);
        }
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // Kh√¥i ph·ª•c roles c≈©
        $reverseMapping = [
            'super_admin' => 'admin',
            'system_admin' => 'admin',
            'content_admin' => 'admin',
            'content_moderator' => 'moderator',
            'marketplace_moderator' => 'moderator',
            'community_moderator' => 'moderator',
            'senior_member' => 'senior',
            'member' => 'member',
            'guest' => 'guest',
            'student' => 'member',
            'manufacturer' => 'manufacturer',
            'supplier' => 'supplier',
            'brand' => 'brand',
            'verified_partner' => 'supplier',
        ];

        foreach ($reverseMapping as $newRole => $oldRole) {
            DB::table('users')
                ->where('role', $newRole)
                ->update(['role' => $oldRole]);
        }

        // X√≥a c√°c columns m·ªõi
        Schema::table('users', function (Blueprint $table) {
            $table->dropIndex('users_role_index');
            $table->dropColumn([
                'role_group',
                'role_permissions',
                'role_updated_at'
            ]);
        });

        // Kh√¥i ph·ª•c ENUM c≈©
        DB::statement("ALTER TABLE users MODIFY COLUMN role ENUM('admin','moderator','senior','member','guest','supplier','manufacturer','brand') DEFAULT 'member'");
    }
};
