<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Post;
use App\Models\Thread;
use App\Models\User;

class ForumPostSeeder extends Seeder
{
    /**
     * Seed forum posts for existing threads
     */
    public function run(): void
    {
        $this->command->info('üó®Ô∏è B·∫Øt ƒë·∫ßu t·∫°o forum posts...');

        $threads = Thread::with('user')->get();
        $users = User::whereIn('role', ['admin', 'moderator', 'senior', 'member'])->get();

        if ($threads->isEmpty()) {
            $this->command->error('‚ùå Kh√¥ng c√≥ threads ƒë·ªÉ t·∫°o posts!');
            return;
        }

        $postsCreated = 0;

        foreach ($threads as $thread) {
            // Each thread gets 0-5 posts
            $postCount = rand(0, 5);

            for ($i = 0; $i < $postCount; $i++) {
                $author = $users->random();

                // Don't let user reply to their own thread immediately
                if ($i === 0 && $author->id === $thread->user_id) {
                    $author = $users->where('id', '!=', $thread->user_id)->random();
                }

                $post = Post::create([
                    'thread_id' => $thread->id,
                    'user_id' => $author->id,
                    'content' => $this->generatePostContent($thread, $i),
                    'created_at' => $thread->created_at->addMinutes(rand(10, 1440 * 7)), // Within a week
                ]);

                $postsCreated++;
            }
        }

        $this->command->info("‚úÖ ƒê√£ t·∫°o {$postsCreated} forum posts");
    }

    private function generatePostContent($thread, $postIndex): string
    {
        $responses = [
            // First responses
            [
                "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! T√¥i c≈©ng ƒëang g·∫∑p v·∫•n ƒë·ªÅ t∆∞∆°ng t·ª±.",
                "R·∫•t h·ªØu √≠ch! B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m chi ti·∫øt kh√¥ng?",
                "T√¥i nghƒ© b·∫°n n√™n th·ª≠ ph∆∞∆°ng ph√°p n√†y...",
                "Theo kinh nghi·ªám c·ªßa t√¥i, v·∫•n ƒë·ªÅ n√†y th∆∞·ªùng do...",
                "B·∫°n ƒë√£ th·ª≠ ki·ªÉm tra c√°c th√¥ng s·ªë k·ªπ thu·∫≠t ch∆∞a?",
            ],
            // Follow-up responses
            [
                "C·∫≠p nh·∫≠t: T√¥i ƒë√£ th·ª≠ v√† n√≥ ho·∫°t ƒë·ªông t·ªët!",
                "C√≥ th·ªÉ b·∫°n c·∫ßn xem x√©t th√™m y·∫øu t·ªë an to√†n.",
                "ƒê√¢y l√† link t√†i li·ªáu tham kh·∫£o: [document.pdf]",
                "T√¥i ƒë√£ l√†m project t∆∞∆°ng t·ª±, c√≥ th·ªÉ chia s·∫ª kinh nghi·ªám.",
                "C·∫ßn ch√∫ √Ω ƒë·∫øn ti√™u chu·∫©n ISO trong tr∆∞·ªùng h·ª£p n√†y.",
            ],
            // Technical responses
            [
                "Theo t√≠nh to√°n c·ªßa t√¥i, ·ª©ng su·∫•t t·∫°i ƒëi·ªÉm n√†y l√†...",
                "B·∫°n c·∫ßn ki·ªÉm tra h·ªá s·ªë an to√†n trong thi·∫øt k·∫ø.",
                "Material properties r·∫•t quan tr·ªçng trong case n√†y.",
                "Finite Element Analysis s·∫Ω gi√∫p verify k·∫øt qu·∫£.",
                "ƒê·ªÅ xu·∫•t s·ª≠ d·ª•ng steel grade S355 cho ·ª©ng d·ª•ng n√†y.",
            ]
        ];

        $responseGroup = min($postIndex, 2);
        return $responses[$responseGroup][array_rand($responses[$responseGroup])];
    }
}
