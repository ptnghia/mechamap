<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Thread;
use App\Models\Comment;
use Illuminate\Support\Facades\DB;

class ReportSeeder extends Seeder
{
    /**
     * Seed reports v·ªõi b√°o c√°o vi ph·∫°m th·ª±c t·∫ø
     * T·∫°o moderation system data
     */
    public function run(): void
    {
        $this->command->info('üö® B·∫Øt ƒë·∫ßu seed reports...');

        // L·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt
        $users = User::all();
        $threads = Thread::all();
        $comments = Comment::all();

        if ($users->isEmpty()) {
            $this->command->error('‚ùå C·∫ßn c√≥ users tr∆∞·ªõc khi seed reports!');
            return;
        }

        // T·∫°o reports
        $this->createReports($users, $threads, $comments);

        $this->command->info('‚úÖ Ho√†n th√†nh seed reports!');
    }

    private function createReports($users, $threads, $comments): void
    {
        $reports = [];

        // T·∫°o 15-25 reports (realistic s·ªë l∆∞·ª£ng cho community)
        $reportCount = rand(15, 25);

        for ($i = 0; $i < $reportCount; $i++) {
            // Random ch·ªçn lo·∫°i content ƒë·ªÉ report
            $contentType = rand(1, 100) <= 70 ? 'thread' : 'comment'; // 70% threads, 30% comments

            if ($contentType === 'thread' && $threads->isNotEmpty()) {
                $reportedThread = $threads->random();
                $reporter = $users->where('id', '!=', $reportedThread->user_id)->random();

                $reportData = $this->generateThreadReport($reporter, $reportedThread);
                $reports[] = $reportData;

            } elseif ($contentType === 'comment' && $comments->isNotEmpty()) {
                $reportedComment = $comments->random();
                $reporter = $users->where('id', '!=', $reportedComment->user_id)->random();

                $reportData = $this->generateCommentReport($reporter, $reportedComment);
                $reports[] = $reportData;
            }
        }

        // Batch insert
        if (!empty($reports)) {
            $chunks = array_chunk($reports, 100);
            foreach ($chunks as $chunk) {
                DB::table('reports')->insert($chunk);
            }
        }

        $this->command->line("   üö® T·∫°o " . count($reports) . " reports");
    }

    private function generateThreadReport($reporter, $thread): array
    {
        $reportTypes = [
            'spam' => 25,
            'inappropriate_content' => 20,
            'off_topic' => 15,
            'duplicate' => 10,
            'misleading_information' => 10,
            'copyright_violation' => 8,
            'harassment' => 7,
            'other' => 5
        ];

        $reportType = $this->getWeightedRandom($reportTypes);
        $reason = $this->getReportReason($reportType, 'thread');

        return [
            'user_id' => $reporter->id,
            'reportable_type' => 'App\\Models\\Thread',
            'reportable_id' => $thread->id,
            'reason' => $reportType,
            'description' => $reason,
            'status' => $this->getReportStatus(),
            'created_at' => now()->subDays(rand(0, 30)),
            'updated_at' => now()->subDays(rand(0, 5)),
        ];
    }

    private function generateCommentReport($reporter, $comment): array
    {
        $reportTypes = [
            'inappropriate_content' => 30,
            'spam' => 20,
            'harassment' => 15,
            'off_topic' => 12,
            'misleading_information' => 10,
            'hate_speech' => 8,
            'other' => 5
        ];

        $reportType = $this->getWeightedRandom($reportTypes);
        $reason = $this->getReportReason($reportType, 'comment');

        return [
            'user_id' => $reporter->id,
            'reportable_type' => 'App\\Models\\Comment',
            'reportable_id' => $comment->id,
            'reason' => $reportType,
            'description' => $reason,
            'status' => $this->getReportStatus(),
            'created_at' => now()->subDays(rand(0, 30)),
            'updated_at' => now()->subDays(rand(0, 5)),
        ];
    }

    private function getReportReason($type, $contentType): string
    {
        $reasons = [
            'spam' => [
                'N·ªôi dung spam, qu·∫£ng c√°o kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ k·ªπ thu·∫≠t',
                'ƒêƒÉng berulang kali c√πng m·ªôt n·ªôi dung',
                'Link spam ƒë·∫øn website b√°n h√†ng',
                'Promotional content kh√¥ng ph√π h·ª£p v·ªõi forum'
            ],
            'inappropriate_content' => [
                'N·ªôi dung kh√¥ng ph√π h·ª£p v·ªõi c·ªông ƒë·ªìng k·ªπ thu·∫≠t',
                'S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¥ t·ª•c, kh√¥ng professional',
                'N·ªôi dung kh√¥ng li√™n quan ƒë·∫øn mechanical engineering',
                'Vi ph·∫°m community guidelines'
            ],
            'off_topic' => [
                'N·ªôi dung kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ forum',
                'Th·∫£o lu·∫≠n ngo√†i l·ªÅ kh√¥ng ph√π h·ª£p',
                'Post sai forum category',
                'Kh√¥ng ƒë√∫ng technical focus c·ªßa community'
            ],
            'duplicate' => [
                'Thread tr√πng l·∫∑p v·ªõi n·ªôi dung ƒë√£ c√≥',
                'C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c h·ªèi nhi·ªÅu l·∫ßn',
                'Duplicate content kh√¥ng c·∫ßn thi·∫øt'
            ],
            'misleading_information' => [
                'Th√¥ng tin k·ªπ thu·∫≠t kh√¥ng ch√≠nh x√°c',
                'Sai l·ªách v·ªÅ technical specifications',
                'C√≥ th·ªÉ g√¢y hi·ªÉu l·∫ßm cho ng∆∞·ªùi ƒë·ªçc',
                'C·∫ßn fact-check t·ª´ experts'
            ],
            'harassment' => [
                'B√¨nh lu·∫≠n mang t√≠nh c√¥ng k√≠ch c√° nh√¢n',
                'Harassment other community members',
                'T·∫°o m√¥i tr∆∞·ªùng kh√¥ng friendly',
                'Vi ph·∫°m respect guidelines'
            ],
            'copyright_violation' => [
                'S·ª≠ d·ª•ng n·ªôi dung c√≥ b·∫£n quy·ªÅn kh√¥ng ƒë∆∞·ª£c ph√©p',
                'Share t√†i li·ªáu copyrighted',
                'Vi ph·∫°m intellectual property'
            ],
            'hate_speech' => [
                'Ng√¥n ng·ªØ k√≠ch ƒë·ªông, ph√¢n bi·ªát ƒë·ªëi x·ª≠',
                'N·ªôi dung hate speech',
                'Vi ph·∫°m nghi√™m tr·ªçng community standards'
            ],
            'other' => [
                'Vi ph·∫°m kh√°c kh√¥ng thu·ªôc c√°c category tr√™n',
                'C·∫ßn review t·ª´ moderators',
                'V·∫•n ƒë·ªÅ c·∫ßn xem x√©t ƒë·∫∑c bi·ªát'
            ]
        ];

        $typeReasons = $reasons[$type] ?? $reasons['other'];
        return $typeReasons[array_rand($typeReasons)];
    }

    private function getReportStatus(): string
    {
        $statuses = [
            'open' => 60,       // 60% open
            'closed' => 25,     // 25% closed
            'open' => 10,       // 10% open
            'closed' => 5       // 5% closed
        ];

        return $this->getWeightedRandom($statuses);
    }



    private function getWeightedRandom($weights): string
    {
        $random = rand(1, 100);
        $cumulative = 0;

        foreach ($weights as $item => $weight) {
            $cumulative += $weight;
            if ($random <= $cumulative) {
                return $item;
            }
        }

        return array_key_first($weights);
    }
}
