<?php

namespace Database\Seeders;

use App\Models\ShowcaseComment;
use App\Models\Showcase;
use App\Models\User;
use Illuminate\Database\Seeder;

class ShowcaseCommentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        echo "üéØ B·∫Øt ƒë·∫ßu t·∫°o Showcase Comments...\n";

        $showcases = Showcase::all();
        $users = User::all();

        if ($showcases->count() === 0) {
            echo "‚ùå Kh√¥ng c√≥ showcases ƒë·ªÉ t·∫°o comments\n";
            return;
        }

        if ($users->count() === 0) {
            echo "‚ùå Kh√¥ng c√≥ users ƒë·ªÉ t·∫°o comments\n";
            return;
        }

        // Comments m·∫´u v·ªÅ k·ªπ thu·∫≠t c∆° kh√≠
        $mechanicalComments = [
            'Thi·∫øt k·∫ø r·∫•t chuy√™n nghi·ªáp! T√¥i th√≠ch c√°ch b·∫°n t·ªëi ∆∞u h√≥a k·∫øt c·∫•u.',
            'Excellent CAD work! C√≥ th·ªÉ share th√™m v·ªÅ material selection kh√¥ng?',
            'Impressive engineering! Tolerance n√†y c√≥ ƒë√°p ·ª©ng manufacturing requirements kh√¥ng?',
            'Great simulation results. B·∫°n ƒë√£ verify v·ªõi actual testing ch∆∞a?',
            'Perfect assembly design. R·∫•t d·ªÖ maintain v√† service.',
            'Outstanding FEA analysis. Safety factor c√≥ ph√π h·ª£p v·ªõi application kh√¥ng?',
            'Brilliant automation solution! Cost effectiveness th·∫ø n√†o?',
            'Innovative approach! ƒê√£ consider environmental impact ch∆∞a?',
            'Solid mechanical design. Documentation r·∫•t chi ti·∫øt.',
            'Amazing precision engineering. Quality control process nh∆∞ th·∫ø n√†o?',
            'Thank you for sharing! S·∫Ω √°p d·ª•ng v√†o project hi·ªán t·∫°i.',
            'Bookmarked! R·∫•t h·ªØu √≠ch cho R&D team.',
            'Could you elaborate on the manufacturing process?',
            'Perfect solution for automation challenges we face.',
            'Great teamwork! Project management approach nh∆∞ th·∫ø n√†o?',
        ];

        $replyComments = [
            'C·∫£m ∆°n feedback! S·∫Ω update documentation chi ti·∫øt h∆°n.',
            'Good point! T√¥i s·∫Ω add th√™m material properties analysis.',
            'Exactly! Safety l√† priority s·ªë 1 trong design n√†y.',
            'Sure! S·∫Ω share workflow trong upcoming tutorial.',
            'Thanks! Quality assurance process r·∫•t strict.',
            'Appreciate the comment! Environmental compliance ƒë√£ ƒë∆∞·ª£c ensure.',
            'Good question! Cost analysis s·∫Ω ƒë∆∞·ª£c include trong phase 2.',
        ];

        $createdCount = 0;

        // T·∫°o comments cho m·ªói showcase
        foreach ($showcases as $showcase) {
            // T·∫°o 2-4 comments cho m·ªói showcase
            $numComments = rand(2, 4);
            $usedUsers = [];

            for ($i = 0; $i < $numComments; $i++) {
                // ƒê·∫£m b·∫£o kh√¥ng tr√πng user trong c√πng showcase
                $availableUsers = $users->filter(function ($user) use ($showcase, $usedUsers) {
                    return $user->id !== $showcase->user_id && !in_array($user->id, $usedUsers);
                });

                if ($availableUsers->count() === 0) {
                    break; // Kh√¥ng c√≤n user n√†o available
                }

                $randomUser = $availableUsers->random();
                $usedUsers[] = $randomUser->id;

                try {
                    $comment = ShowcaseComment::create([
                        'showcase_id' => $showcase->id,
                        'user_id' => $randomUser->id,
                        'comment' => $mechanicalComments[array_rand($mechanicalComments)],
                        'parent_id' => null,
                        'like_count' => rand(0, 8),
                        'created_at' => now()->subDays(rand(1, 10))->subHours(rand(0, 23)),
                        'updated_at' => now()->subDays(rand(0, 5))->subHours(rand(0, 23)),
                    ]);

                    if ($comment) {
                        echo "‚úÖ Comment #{$comment->id}: {$randomUser->name} commented on showcase #{$showcase->id}\n";
                        $createdCount++;
                    }
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o comment cho showcase {$showcase->id}: " . $e->getMessage() . "\n";
                    continue;
                }
            }
        }

        // T·∫°o m·ªôt s·ªë reply comments
        $topLevelComments = ShowcaseComment::whereNull('parent_id')->take(5)->get();

        foreach ($topLevelComments as $parentComment) {
            // T·∫°o reply t·ª´ ch·ªß showcase
            $showcase = $parentComment->showcase;
            if ($showcase && $showcase->user_id !== $parentComment->user_id) {
                try {
                    $reply = ShowcaseComment::create([
                        'showcase_id' => $showcase->id,
                        'user_id' => $showcase->user_id,
                        'comment' => $replyComments[array_rand($replyComments)],
                        'parent_id' => $parentComment->id,
                        'like_count' => rand(0, 5),
                        'created_at' => $parentComment->created_at->addHours(rand(1, 48)),
                        'updated_at' => $parentComment->created_at->addHours(rand(1, 72)),
                    ]);

                    if ($reply) {
                        echo "‚úÖ Reply #{$reply->id}: {$showcase->user->name} replied to comment #{$parentComment->id}\n";
                        $createdCount++;
                    }
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o reply cho comment {$parentComment->id}: " . $e->getMessage() . "\n";
                    continue;
                }
            }
        }

        echo "üéâ Ho√†n th√†nh t·∫°o {$createdCount} showcase comments!\n";
    }
}
